<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ken</title>
  
  <subtitle>Talk is cheap. Show me the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0x002.top/"/>
  <updated>2018-07-31T02:09:58.000Z</updated>
  <id>http://0x002.top/</id>
  
  <author>
    <name>Ken</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过发币学习以太坊智能合约</title>
    <link href="http://0x002.top/2018/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B9%8B%E5%8F%91%E5%B8%81/"/>
    <id>http://0x002.top/2018/07/30/区块链之发币/</id>
    <published>2018-07-30T11:30:00.000Z</published>
    <updated>2018-07-31T02:09:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>点进来我就把你当成一个会写代码，玩过 ICO 的人，ICO 通过发币融资的方式分分钟走向人生巅峰，迎娶白富美，那么到底是如何发币，发币难不难，我们只知道炒币，不知道发币，那你怎么敢买的？</p><p>一个简单的 token 合约包括：代码部署，转账，上传代码到etherscan并验证，代币管理，代币增发，冻结，销毁，到我们熟知的 ICO。</p><h3><span id="开发环境在线ide">开发环境，在线IDE</span></h3><p><strong><a href="https://remix.ethereum.org/#version=soljson-v0.4.24+commit.c2215d46.js&amp;optimize=false" target="_blank" rel="noopener">remix</a></strong></p><p>首先来看一下最简单并且可以转账的代币长什么样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">contract SimpleToken &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public balanceOf;</span><br><span class="line">    </span><br><span class="line">    constructor (uint256 init) public&#123;</span><br><span class="line">        balanceOf[msg.sender] = init;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function transfer(address _to, uint256 _value) public&#123;</span><br><span class="line">        //防溢出</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= _value);</span><br><span class="line">        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);</span><br><span class="line">        </span><br><span class="line">        balanceOf[msg.sender] -= _value;</span><br><span class="line">        balanceOf[_to] += _value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们去 <a href="https://etherscan.io/tokens" target="_blank" rel="noopener">etherscan</a> 上看一下，正经的代币长什么样子，都包含哪些东西。</p><p>以 <a href="https://etherscan.io/token/0xB8c77482e45F1F44dE1745F52C74426C631bDD52#readContract" target="_blank" rel="noopener">BNB</a> 为例，有 name，totalSupply，decimals，balanceOf，owner，symbol，freezeOf，allowance。</p><p>其中name，totalSupply，decimals，symbol 是ERC20标准代币规范，每个代币都必须要有的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">contract erc20Interface&#123;</span><br><span class="line">    string public name;</span><br><span class="line">    string public symbol;</span><br><span class="line">    uint8 public decimal;</span><br><span class="line">    uint public totalSupply;</span><br><span class="line">    </span><br><span class="line">    function transfer(address _to,uint256 _value) public returns (bool succ);</span><br><span class="line">    </span><br><span class="line">    function transferFrom(address _from,address _to,uint256 _value) public returns (bool succ);</span><br><span class="line">    </span><br><span class="line">    function approve(address _spender,uint256 _value) public returns (bool succ);</span><br><span class="line">    </span><br><span class="line">    function allowance(address _owner,address _spender) public view returns (uint256 remaining);</span><br><span class="line">    </span><br><span class="line">    event Transfer(address indexed _from,address indexed _to,uint256 _value);</span><br><span class="line">    </span><br><span class="line">    event Approve(address indexed _owner,address indexed _spender,uint256 _value);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &apos;./erc20Interface.sol&apos;;</span><br><span class="line"></span><br><span class="line">contract ERC20 is erc20Interface&#123;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; uint256) balanceOf;</span><br><span class="line">    </span><br><span class="line">    mapping(address =&gt; mapping(address =&gt; uint256)) allowed;</span><br><span class="line">    </span><br><span class="line">    constructor(string _name,string _symbol,uint8 _dec,uint _total) public&#123;</span><br><span class="line">        name = _name;</span><br><span class="line">        symbol = _symbol; </span><br><span class="line">        decimal = _dec;</span><br><span class="line">        totalSupply = _total;</span><br><span class="line">        balanceOf[msg.sender] = totalSupply;</span><br><span class="line">    &#125;</span><br><span class="line">    function transfer(address _to,uint256 _value) public returns (bool succ)&#123;</span><br><span class="line">        require(_to != address(0));</span><br><span class="line">        require(balanceOf[msg.sender] &gt;= _value);</span><br><span class="line">        require(balanceOf[_to]+_value &gt; balanceOf[_to]); </span><br><span class="line">        </span><br><span class="line">        balanceOf[msg.sender] -= _value;</span><br><span class="line">        balanceOf[_to] += _value;</span><br><span class="line">        </span><br><span class="line">        emit Transfer(msg.sender, _to, _value);</span><br><span class="line">        </span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function transferFrom(address _from,address _to,uint256 _value) public returns (bool succ)&#123;</span><br><span class="line">        require(_to != address(0));</span><br><span class="line">        require(allowed[_from][msg.sender] &gt;= _value);</span><br><span class="line">        require(balanceOf[_from] &gt;= _value);</span><br><span class="line">        require(balanceOf[_to]+_value &gt; balanceOf[_to]); </span><br><span class="line">        </span><br><span class="line">        balanceOf[_from] -= _value;</span><br><span class="line">        balanceOf[_to] += _value;</span><br><span class="line">        </span><br><span class="line">        allowed[_from][msg.sender] -= _value;</span><br><span class="line">        emit Transfer(msg.sender, _to, _value);</span><br><span class="line">        </span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function approve(address _spender,uint256 _value) public returns (bool succ)&#123;</span><br><span class="line">        allowed[msg.sender][_spender] = _value;</span><br><span class="line">        emit Approve(msg.sender,_spender,_value);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function allowance(address _owner,address _spender) public view returns (uint256 remaining)&#123;</span><br><span class="line">        return allowed[_owner][_spender];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的 erc20 继承erc20Interface接口，代币规范中的几个在创建的时候就要实例化完成，所以我们写一个构造函数constructor声明，从外面传过来。实现接口中的方法，transfer就是一个发送地址做减法，接收地址做加法的过程。require检查各种异常情况，包括溢出，接收地址是不是无效之类的。如果失败，则会被 revert 掉。反之用emit触发事件。</p><p>我们在 log 中可以看到，emit 触发的事情返回长这个样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;from&quot;: &quot;0x5e72914535f202659083db3a02c984188fa26e9f&quot;,</span><br><span class="line">&quot;topic&quot;: &quot;0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef&quot;,</span><br><span class="line">&quot;event&quot;: &quot;Transfer&quot;,</span><br><span class="line">&quot;args&quot;: &#123;</span><br><span class="line">&quot;0&quot;: &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">&quot;1&quot;: &quot;0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c&quot;,</span><br><span class="line">&quot;2&quot;: &quot;1000&quot;,</span><br><span class="line">&quot;_from&quot;: &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">&quot;_to&quot;: &quot;0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c&quot;,</span><br><span class="line">&quot;_value&quot;: &quot;1000&quot;,</span><br><span class="line">&quot;length&quot;: 3</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="部署">部署</span></h3><p>下面我们将 erc20部署到测试网络，remix 小狐狸插件<a href="http://metamask.io" target="_blank" rel="noopener">metamask</a>,将合约代码部署到测试网络。metamask 安装使用方法自行Google。<br>我们将 remix 右边栏 run 选项中的Environment切换成Injected Web3，每次执行 deploy 的时候都会启动狐狸插件，第一次安装是没有 eth 的，小狐狸会提示你 BUY，去测试水龙头自行购买，速度取决于测试环境 eth网络。购买成功，我们将 gas 调大一点，部署合约速度会更快。平时我们自行测试用JSVM 环境就好了，调试都一样，唯一不一样的就是是否上链。部署合约，触发函数都会消耗 gas。</p><p>当我们合约部署成功之后 <a href="https://ropsten.etherscan.io/token/你的地址，" target="_blank" rel="noopener">https://ropsten.etherscan.io/token/你的地址，</a><br>这个地址就是 remix 中deploy 时合约名字后面的地址，直接访问可以看到当时你设置的名字之类的，在readContract这个 tab 下面会让你 please Verify Your Contract Source Code here.验证代码，那我们就把代码拷贝进去然后，合约名字，编译环境都要和我们部署的时候一致，不要搞错了，点击验证并发布，不出意外等一会成功，然后我们就看到了我们刚开始 BNB 页面一样的效果了。</p><h3><span id="增发">增发：</span></h3><p>主要两步代币的管理者 Owner，然后修改我们的totalSupply总量。这里我们会用到一个函数修改器modifier，先看代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.20;</span><br><span class="line"></span><br><span class="line">contract Owned &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    constructor () public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    function transferOwnerShip(address newOwner) public onlyOwner &#123;</span><br><span class="line">        owner = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.20;</span><br><span class="line"></span><br><span class="line">contract Owned &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    constructor () public&#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    function transferOwnerShip(address newOwner) public &#123;</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        owner = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一下子就看懂了吧。</p><p>我们想要的效果就是只有owner才可以执行transferOwnerShip，其他地址用户访问会被拒绝。<br>owner 就是我们部署合约的主账号。</p><p>代币管理者 owner 已实现，下面我们来修改totalSupply。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.20;</span><br><span class="line"></span><br><span class="line">import &quot;./erc20.sol&quot;;</span><br><span class="line"></span><br><span class="line">import &quot;./owned.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract AdvanceToken is ERC20,Owned &#123;</span><br><span class="line"></span><br><span class="line">    event AddSupply(uint amount);</span><br><span class="line">    </span><br><span class="line">    constructor (string _name,string _symbol,uint8 _dec,uint _total) ERC20(_name,_symbol,_dec,_total) public &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function mine(address _target,uint _amount) public onlyOwner&#123;</span><br><span class="line">        totalSupply += _amount;</span><br><span class="line">        balanceOf[_target] += _amount;</span><br><span class="line">        </span><br><span class="line">        emit AddSupply(_amount);</span><br><span class="line">        emit Transfer(0,_target,_amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="实现代币冻结">实现代币冻结</span></h3><p>资产在钱包但是不能交易。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mapping(address =&gt; bool) public frozenAccount;</span><br><span class="line">event FrozenFunds(address _target,bool frozen);</span><br><span class="line">//资产冻结</span><br><span class="line">function freezeAccount(address _target,bool freeze) public onlyOwner&#123;</span><br><span class="line">    frozenAccount[_target] = freeze;</span><br><span class="line">    emit FrozenFunds(_target,freeze);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已讲资产冻结但是还可以交易，下面我们对交易函数做一下判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function transfer(address _to,uint256 _value) public returns (bool succ)&#123;</span><br><span class="line">    succ =  _transfer(msg.sender,_to,_value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function transferFrom(address _from,address _to,uint256 _value) public returns (bool succ)&#123;</span><br><span class="line">   require(allowed[_from][msg.sender] &gt;= _value);</span><br><span class="line">   succ = _transfer(_from,_to,_value);</span><br><span class="line">   allowed[_from][msg.sender] -= _value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _transfer(address _from,address _to,uint256 _value) internal returns (bool succ)&#123;</span><br><span class="line">    require(_to != address(0));</span><br><span class="line">    require(!frozenAccount[_from]);</span><br><span class="line">    </span><br><span class="line">    require(balanceOf[_from] &gt;= _value);</span><br><span class="line">    require(balanceOf[_to]+_value &gt; balanceOf[_to]); </span><br><span class="line">    </span><br><span class="line">    balanceOf[_from] -= _value;</span><br><span class="line">    balanceOf[_to] += _value;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    emit Transfer(_from, _to, _value);</span><br><span class="line">    </span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代币冻结并不能交易也 OK 了。下面来实现代币销毁。</p><h3><span id="代币销毁">代币销毁</span></h3><p>账户金额减少，总发行量减少，两个功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">event Burn(address _target,uint amount);</span><br><span class="line">//资产销毁</span><br><span class="line">function burn(uint256 _value) public returns (bool success)&#123;</span><br><span class="line">    </span><br><span class="line">    require(balanceOf[msg.sender] &gt; _value);</span><br><span class="line">    </span><br><span class="line">    totalSupply -= _value;</span><br><span class="line">    balanceOf[msg.sender] -= _value;</span><br><span class="line"></span><br><span class="line">    emit Burn(msg.sender,_value);</span><br><span class="line">    </span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function burnFrom(address _from,uint256 _value) public returns (bool success)&#123;</span><br><span class="line">    require(balanceOf[_from] &gt;= _value);</span><br><span class="line">    require(allowed[_from][msg.sender] &gt;= _value);</span><br><span class="line">    </span><br><span class="line">    totalSupply -= _value;</span><br><span class="line">    balanceOf[_from] -= _value;</span><br><span class="line">    allowed[_from][msg.sender] -= _value;</span><br><span class="line"></span><br><span class="line">    emit Burn(_from,_value);</span><br><span class="line">    </span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们讲过冻结，他是冻结某个账号所有token。现在市面上很多 ICO 都是token 锁定并分批释放解锁。</p><h3><span id="分批释放解锁">分批释放解锁</span></h3><p>同样我们可以用 mapping 来保存账号锁定的token，我们在 transfer 的时候对锁定的token进行判断然后转账，我们还要考虑到分批解锁，与时间相关，随着时间的推移，锁定的token会越来越少。</p><h3><span id="ico">ICO</span></h3><p>一 ：包括众筹时间，目标，兑换价格，受益人几个参数。<br>二 ：实现代币与以太币的兑换。<br>三：众筹成功下发 token，失败退款相应 eth</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.20;</span><br><span class="line"></span><br><span class="line">import &apos;./Owned.sol&apos;;</span><br><span class="line"></span><br><span class="line">interface token &#123;</span><br><span class="line">    function transfer(address _to,uint _amount) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ico is Owned&#123;</span><br><span class="line">    uint public fundingGoal;</span><br><span class="line">    uint public deadline; //截止日期</span><br><span class="line">    uint public price;</span><br><span class="line">    uint public fundAmount;</span><br><span class="line">    token public tokenReward;</span><br><span class="line">    address public beneiciary;//受益人</span><br><span class="line">    </span><br><span class="line">    mapping (address =&gt; uint) public balanceOf;</span><br><span class="line">    </span><br><span class="line">    event FundTranfer(address backer,uint amount);</span><br><span class="line">    event FundReached(bool sucess);</span><br><span class="line"></span><br><span class="line">    constructor (uint fundingGoalInEther,uint durationInMinu,uint etherCostofEachToken,address addressOfToken) public&#123;</span><br><span class="line">        fundingGoal = fundingGoalInEther * 1 ether;</span><br><span class="line">        deadline = now + durationInMinu * 1 minutes;</span><br><span class="line">        price = etherCostofEachToken * 1 ether;  //1eth = 10 ** 18 wei</span><br><span class="line">        tokenReward = token(addressOfToken);</span><br><span class="line">        beneiciary = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function () public payable&#123;</span><br><span class="line">        </span><br><span class="line">        require (now &lt; deadline);</span><br><span class="line">        </span><br><span class="line">        uint amount = msg.value;  //wei</span><br><span class="line">        balanceOf[msg.sender] += amount;</span><br><span class="line">        fundAmount += amount;</span><br><span class="line">        uint tokenAmount = 0;</span><br><span class="line">        //实现空投</span><br><span class="line">        if (amount == 0)&#123;</span><br><span class="line">            tokenAmount = 10;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            tokenAmount = amount / price;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tokenReward.transfer(msg.sender,tokenAmount);</span><br><span class="line">        </span><br><span class="line">        emit FundTranfer(msg.sender,amount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //只有 owner 才可以设置阶梯价格</span><br><span class="line">    function setPrice(uint etherCostofEachToken) public onlyOwner&#123;</span><br><span class="line">        price = etherCostofEachToken * 1 ether;  //1eth = 10 ** 18 wei</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //检查众筹是否结束</span><br><span class="line">    modifier afterDeadLine&#123;</span><br><span class="line">        require(now&gt;=deadline);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function checkFundReachd() public afterDeadLine&#123;</span><br><span class="line">        if(fundAmount &gt; fundingGoal)&#123;</span><br><span class="line">            emit FundReached(true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function withdrawal() public afterDeadLine&#123;</span><br><span class="line">        if(fundAmount &gt; fundingGoal)&#123;</span><br><span class="line">            //众筹成功</span><br><span class="line">            if(beneiciary == msg.sender)&#123;</span><br><span class="line">                beneiciary.transfer(fundAmount);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            uint amount = balanceOf[msg.sender];</span><br><span class="line">            if(amount &gt; 0)&#123;</span><br><span class="line">                msg.sender.transfer(amount);</span><br><span class="line">                msg.sender = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点进来我就把你当成一个会写代码，玩过 ICO 的人，ICO 通过发币融资的方式分分钟走向人生巅峰，迎娶白富美，那么到底是如何发币，发币难不难，我们只知道炒币，不知道发币，那你怎么敢买的？&lt;/p&gt;
&lt;p&gt;一个简单的 token 合约包括：代码部署，转账，上传代码到etherscan并验证，代币管理，代币增发，冻结，销毁，到我们熟知的 ICO。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;开发环境在线ide&quot;&gt;开发环境，在线IDE&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://remix.ethereum.org/#version=soljson-v0.4.24+commit.c2215d46.js&amp;amp;optimize=false&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;remix&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先来看一下最简单并且可以转账的代币长什么样：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pragma solidity ^0.4.24;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contract SimpleToken &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mapping(address =&amp;gt; uint256) public balanceOf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    constructor (uint256 init) public&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        balanceOf[msg.sender] = init;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function transfer(address _to, uint256 _value) public&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //防溢出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        require(balanceOf[msg.sender] &amp;gt;= _value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        require(balanceOf[_to] + _value &amp;gt;= balanceOf[_to]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        balanceOf[msg.sender] -= _value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        balanceOf[_to] += _value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那我们去 &lt;a href=&quot;https://etherscan.io/tokens&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;etherscan&lt;/a&gt; 上看一下，正经的代币长什么样子，都包含哪些东西。&lt;/p&gt;
&lt;p&gt;以 &lt;a href=&quot;https://etherscan.io/token/0xB8c77482e45F1F44dE1745F52C74426C631bDD52#readContract&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BNB&lt;/a&gt; 为例，有 name，totalSupply，decimals，balanceOf，owner，symbol，freezeOf，allowance。&lt;/p&gt;
&lt;p&gt;其中name，totalSupply，decimals，symbol 是ERC20标准代币规范，每个代币都必须要有的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;contract erc20Interface&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string public name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string public symbol;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint8 public decimal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint public totalSupply;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function transfer(address _to,uint256 _value) public returns (bool succ);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function transferFrom(address _from,address _to,uint256 _value) public returns (bool succ);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function approve(address _spender,uint256 _value) public returns (bool succ);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    function allowance(address _owner,address _spender) public view returns (uint256 remaining);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event Transfer(address indexed _from,address indexed _to,uint256 _value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event Approve(address indexed _owner,address indexed _spender,uint256 _value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="区块链" scheme="http://0x002.top/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="智能合约" scheme="http://0x002.top/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序初探</title>
    <link href="http://0x002.top/2016/12/04/xiaochengxu/"/>
    <id>http://0x002.top/2016/12/04/xiaochengxu/</id>
    <published>2016-12-04T09:26:32.000Z</published>
    <updated>2018-05-31T02:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近很是火热的莫过于小程序了,我也来凑凑热闹,体验了一把,关于小程序的定义,网上流传的张小龙朋友圈是这样说的:</p><blockquote><p>小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载</p></blockquote><p><a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/index.html?t=20161122" target="_blank" rel="noopener">官网必须有</a></p><a id="more"></a><p>Demo Gif</p><p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1fafqlsdwbmg30n013y1kx.gif" width="300dp" height="220dp"></p><p>主要实现了一个记事本的小demo, 可以增加,可以修改,简单记录一下,学习一下而已.<br>大致目录如下:</p><p><img src="http://ww4.sinaimg.cn/mw690/005yqym4gw1faezfzhhrhj30e20wqta7.jpg" width="200dp" height="220dp"></p><p>其中 <strong>.js,.wxml,.wxss,.json</strong>分别对应的是我们逻辑,布局,样式,后面那个我们可写可不写,很清晰,相当于我们 Android 上面的 java 代码, xml 布局, style 样式差不多.<br>一些组件,一些框架官网已经很全了,还给了栗子,直接拿来改改就可以用!<br>例子中并没有申请开发者,只是简单的注册了开发者,所以拿到了 appId, 可以真机测试,这点比较爽,不能上架而已!上架这些事如果不真心的话,还是看公司发展吧!里面一些申请的过程比较公司化,所以不怎么会搞!!<br>里面的数据存储由于没有后台支持,只能使用它们自己的 storage,最大支持10M, 应该够了!<br>后面会把代码放到 github 的!</p><p>最后来看看爱范儿的一篇文章吧</p><p><a href="http://www.myzaker.com/article/581be8cd1bc8e01b39000010/" target="_blank" rel="noopener">微信小程序的想象力与不可想象域</a></p><p>版权声明：<br></p><p><hr><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近很是火热的莫过于小程序了,我也来凑凑热闹,体验了一把,关于小程序的定义,网上流传的张小龙朋友圈是这样说的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/introduction/index.html?t=20161122&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网必须有&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Demo Gif&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005yqym4gw1fafqlsdwbmg30n013y1kx.gif&quot; width=&quot;300dp&quot; height=&quot;220dp&quot;&gt;&lt;/p&gt;
&lt;p&gt;主要实现了一个记事本的小demo, 可以增加,可以修改,简单记录一下,学习一下而已.&lt;br&gt;大致目录如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/005yqym4gw1faezfzhhrhj30e20wqta7.jpg&quot; width=&quot;200dp&quot; height=&quot;220dp&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;strong&gt;.js,.wxml,.wxss,.json&lt;/strong&gt;分别对应的是我们逻辑,布局,样式,后面那个我们可写可不写,很清晰,相当于我们 Android 上面的 java 代码, xml 布局, style 样式差不多.&lt;br&gt;一些组件,一些框架官网已经很全了,还给了栗子,直接拿来改改就可以用!&lt;br&gt;例子中并没有申请开发者,只是简单的注册了开发者,所以拿到了 appId, 可以真机测试,这点比较爽,不能上架而已!上架这些事如果不真心的话,还是看公司发展吧!里面一些申请的过程比较公司化,所以不怎么会搞!!&lt;br&gt;里面的数据存储由于没有后台支持,只能使用它们自己的 storage,最大支持10M, 应该够了!&lt;br&gt;后面会把代码放到 github 的!&lt;/p&gt;
&lt;p&gt;最后来看看爱范儿的一篇文章吧&lt;/p&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="http://0x002.top/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="微信小程序" scheme="http://0x002.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Activity 和 Fragment 生命周期对比</title>
    <link href="http://0x002.top/2016/06/27/activity-fragment-lifecycle/"/>
    <id>http://0x002.top/2016/06/27/activity-fragment-lifecycle/</id>
    <published>2016-06-27T10:08:44.000Z</published>
    <updated>2018-05-30T13:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f59y2mzqpcj30ks0u2dha.jpg" width="300dp" height="320dp"></p><p>正好推荐一款画流程图的利器,chrome 插件</p><p><a href="https://chrome.google.com/webstore/detail/gliffy-diagrams/bhmicilclplefnflapjmnngmkkkkpfad?hl=zh-CN" target="_blank" rel="noopener">gliffy-diagrams</a></p><p>版权声明：<br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005yqym4gw1f59y2mzqpcj30ks0u2dha.jpg&quot; width=&quot;300dp&quot; height=&quot;320dp&quot;&gt;&lt;/p&gt;
&lt;p&gt;正好推荐一款画流程图的利器,chrome 插件&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/gliffy-diagrams/bhmicilclplefnflapjmnngmkkkkpfad?hl=zh-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gliffy-diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;版权声明：&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="Activity Fragment生命周期" scheme="http://0x002.top/tags/Activity-Fragment%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio-NDK初探</title>
    <link href="http://0x002.top/2016/06/20/androidStuio-ndk-demo/"/>
    <id>http://0x002.top/2016/06/20/androidStuio-ndk-demo/</id>
    <published>2016-06-20T11:48:49.000Z</published>
    <updated>2018-05-31T05:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>话说 AndroidStudio从面世以来就一直被质疑能不能用这玩意开发NDK哪,从1.3以后貌似就支持的差不多了,现在都2.2了我才用他来玩NDK, 真是惭愧啊,鼓捣了一下午,看了几篇博客,想到了高中生物课本的一句话,”一猪生九仔,连母十个样啊!!”既然AndroidStudio已经这么人性化了,看了几个决定自己点点看,但是一些地方还是要谢谢那几篇博客啦!</p><a id="more"></a><!--[TOC]--><h2><span id="ndk-环境配置搭建">ndk 环境配置搭建</span></h2><p>配置ndk 到我们的环境变量中去,和当初我们配置adb是一样的,打开我们的.bash_profile文件(Windows 请自行Google),把我们的 ndk 路径放进去,话说现在AndroidStudio已经很完美的支持ndk了,ndk的下载可以像下载sdk那样下载了,下载完你的目录会多出一个ndk-bundle目录,那就是我们需要关心并把他的路径放到bash_profile文件中去的.使其bash_profile文件生效,并在终端输入ndk-build,如果有信息输出并不是error级别的那就证明 ok 了.</p><h2><span id="新建-ndk-项目">新建 ndk 项目</span></h2><p>我们用 AndroidStudio(2.1.2) 新建我们的 ndk 项目,和 Android 项目一样,这里我打算用 ndk写一个求和的 demo,MainActivity就是一个 TextView 显示我们的求和结果,没有说的,然后我们新建一个 Java 类,用来实现native方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NDKTest</span>&amp;#123</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>&amp;#123</span>;</span><br><span class="line">static&amp;#123;</span><br><span class="line">System.loadLibary(<span class="string">"NDKDEMO"</span>);</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>这里暂时用到这两个文件,如何才能发挥他们的威力,下面会讲.那么这里面有这么一行<code>System.loadLibrary(&quot;NDKDEMO&quot;);</code>,那我们就要开始配置我们的 ndk 到项目使其生效,首先打开local.properties这个文件,把 ndk 的路径像 sdk 那样配置进去,然后在gradle.properties这个文件尾加上<code>android.useDeprecatedNdk=true</code>,最后在 app gradle 文件中加上</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ndk&amp;#123;</span><br><span class="line">moudleName <span class="string">"NDKDEMO"</span></span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>看出来了吧,上面的System.loadLibrary其实就是这地方的moduleName,同步我们的工程,应该不会报错!</p><h2><span id="jni-的两种生成姿势">jni 的两种生成姿势</span></h2><h3><span id="androidstudio的智能体现">AndroidStudio的智能体现</span></h3><p>我们在 MyNDK 中定义了一个 native 方法,但是他报红了,我们使用 AndroidStudio 的智能提示, alt+enter, 看到第一个选项就是<br><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f51yzfya2uj30go00l0ss.jpg" alt=""><br>然后我们看到 main 下面多出了一个 jni 目录,下面多出了和moduleName一样的文件,打开我们可以看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line">JNIEXPORT jint JNICALL</span><br><span class="line">Java_ndktst_android_com_ndkdemo_NDKTest_add(JNIEnv *env,jclass type,jint a,jint b)&amp;#<span class="number">123</span>;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&amp;#<span class="number">125</span>;</span><br></pre></td></tr></table></figure><p>形式就是包名+ native类名+方法名,这样就OK, 我们把 a+b 返回,然后我们在 MainActivity 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NDKTest myNdk = <span class="keyword">new</span> NDKTest();</span><br><span class="line">textView.setText(myNdk.add(<span class="number">1</span>,<span class="number">1</span>)+<span class="string">""</span>);</span><br></pre></td></tr></table></figure><p>这样 TextView 中显示2,成功.</p><h3><span id="最装逼也是最常用的姿势">最装逼也是最常用的姿势</span></h3><p>这一种是我们最常用的姿势,在 AndroidStudio 中打开终端,定位到我们的 Java 目录,输入<code>javah -jni  packageName+className</code>去我们的 jni 目录看见生成了一个很长的.h 文件,以本例为例,生成了一个这东西<code>ndktst_android_com_ndkdemo_NDKTest.h</code>,一般不在这个文件中进行操作,会在复制一个文件,命名为.cpp的文件,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ndktst_android_com_ndkdemo_MyNDK.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Add.h"</span></span></span><br><span class="line">jint Java_ndktst_android_com_ndkdemo_NDKTest_add(JNIEnv *env,jclass jclassl,jint jint1,jint jint2)&amp;#123;</span><br><span class="line">Add add;</span><br><span class="line"><span class="keyword">return</span> add.addFromClass(jint1.jint2);</span><br><span class="line">&amp;#<span class="number">125</span>;</span><br></pre></td></tr></table></figure><p>然后我们新建一个C++类,自动生成. h 和. cpp的文件,.h 文件中我们这样写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NDKDEMO_ADD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NDKDEMO_ADD_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span>&amp;&amp;#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addFromClass</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&amp;#<span class="number">125</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//NDKDEMO_ADD_H</span></span></span><br></pre></td></tr></table></figure><p>.cpp 这样写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Add.h"</span></span></span><br><span class="line"><span class="keyword">int</span> Add::addFromClass(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&amp;#<span class="number">123</span>;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&amp;#<span class="number">125</span>;</span><br></pre></td></tr></table></figure><p>上面那个很长的. cpp 文件应该找到解释了吧,我们只不过是把加法运算的方法重新定义了类,在那里面调用.最后运行的结果是一样的!!!</p><h2><span id="大功告成">大功告成</span></h2><p>这里我们只是传递了 int 类型的,那么我们在实际开发中用到的不止 int 类型,可能我们要传一个对象等等啊,就完全不一样了,我们要去看官方文档,有点复杂,这篇文章只是和大家一起在 AndroidStudio 上面先把 ndk 玩转而已!!!真实开发中用到的时候再来填坑吧!!!!<br>一个好朋友献上的,😄😄</p><p><img src="http://ww2.sinaimg.cn/large/005yqym4gw1f534rsx76lg30yz0j94qp.gif" alt=""></p><p><a href="https://developer.android.com/ndk/index.html" target="_blank" rel="noopener">NDK 指南</a><br><a href="https://codelabs.developers.google.com/codelabs/android-studio-jni/index.html?index=..%2F..%2Findex#0" target="_blank" rel="noopener">developers.google.ndk</a></p><p>版权声明：<br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说 AndroidStudio从面世以来就一直被质疑能不能用这玩意开发NDK哪,从1.3以后貌似就支持的差不多了,现在都2.2了我才用他来玩NDK, 真是惭愧啊,鼓捣了一下午,看了几篇博客,想到了高中生物课本的一句话,”一猪生九仔,连母十个样啊!!”既然AndroidStudio已经这么人性化了,看了几个决定自己点点看,但是一些地方还是要谢谢那几篇博客啦!&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;!--[TOC]--&gt;
&lt;h2&gt;&lt;span id=&quot;ndk-环境配置搭建&quot;&gt;ndk 环境配置搭建&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;配置ndk 到我们的环境变量中去,和当初我们配置adb是一样的,打开我们的.bash_profile文件(Windows 请自行Google),把我们的 ndk 路径放进去,话说现在AndroidStudio已经很完美的支持ndk了,ndk的下载可以像下载sdk那样下载了,下载完你的目录会多出一个ndk-bundle目录,那就是我们需要关心并把他的路径放到bash_profile文件中去的.使其bash_profile文件生效,并在终端输入ndk-build,如果有信息输出并不是error级别的那就证明 ok 了.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;新建-ndk-项目&quot;&gt;新建 ndk 项目&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;我们用 AndroidStudio(2.1.2) 新建我们的 ndk 项目,和 Android 项目一样,这里我打算用 ndk写一个求和的 demo,MainActivity就是一个 TextView 显示我们的求和结果,没有说的,然后我们新建一个 Java 类,用来实现native方法&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NDKTest&lt;/span&gt;&amp;amp;#123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b)&lt;/span&gt;&amp;amp;#123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		static&amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			System.loadLibary(&lt;span class=&quot;string&quot;&gt;&quot;NDKDEMO&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里暂时用到这两个文件,如何才能发挥他们的威力,下面会讲.那么这里面有这么一行&lt;code&gt;System.loadLibrary(&amp;quot;NDKDEMO&amp;quot;);&lt;/code&gt;,那我们就要开始配置我们的 ndk 到项目使其生效,首先打开local.properties这个文件,把 ndk 的路径像 sdk 那样配置进去,然后在gradle.properties这个文件尾加上&lt;code&gt;android.useDeprecatedNdk=true&lt;/code&gt;,最后在 app gradle 文件中加上&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ndk&amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	moudleName &lt;span class=&quot;string&quot;&gt;&quot;NDKDEMO&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看出来了吧,上面的System.loadLibrary其实就是这地方的moduleName,同步我们的工程,应该不会报错!&lt;/p&gt;
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://0x002.top/categories/AndroidStudio/"/>
    
      <category term="NDK" scheme="http://0x002.top/categories/AndroidStudio/NDK/"/>
    
    
      <category term="AndroidStudio" scheme="http://0x002.top/tags/AndroidStudio/"/>
    
      <category term="NDK" scheme="http://0x002.top/tags/NDK/"/>
    
  </entry>
  
  <entry>
    <title>App后台开发运维和架构实践Reading Notes 1</title>
    <link href="http://0x002.top/2016/06/18/appSecurityStudy/"/>
    <id>http://0x002.top/2016/06/18/appSecurityStudy/</id>
    <published>2016-06-18T14:00:52.000Z</published>
    <updated>2018-05-30T12:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>App后台开发运维和架构实践读书笔记(1)第三章 App 后台核心技术.<br>可能有人看到这会说为什么会从第三章开始讲,因为前两章讲的 App 后台入门,后台基础技术,也可以去下载试看前三章,既然可以试看前三章,那为什么还写第三章,因为第三章太值得我们去看去写了,虽然还没看完,就想停下来动笔去写写这样忘得才能慢一点.<br>待续—–</p><a id="more"></a><p>/usr/local/Cellar/python3/3.4.3_1/Frameworks/Python.framework/Versions/3.4</p><!--TOC--><h2><span id="目录1">目录1</span></h2><p>App后台开发运维和架构实践</p><h2><span id="目录2">目录2</span></h2><p>App后台开发运维和架构实践</p><p><a href="http://blog.csdn.net/newjueqi" target="_blank" rel="noopener">作者 CSDN</a><br><a href="https://www.amazon.cn/App后台开发运维和架构实践-曾健生/dp/B01F5SYZPC/ref=sr_1_1?ie=UTF8&amp;qid=1465010602&amp;sr=8-1&amp;keywords=App后台开发运维和架构实践" target="_blank" rel="noopener">App后台开发运维和架构实践购买地址</a></p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;App后台开发运维和架构实践读书笔记(1)第三章 App 后台核心技术.&lt;br&gt;可能有人看到这会说为什么会从第三章开始讲,因为前两章讲的 App 后台入门,后台基础技术,也可以去下载试看前三章,既然可以试看前三章,那为什么还写第三章,因为第三章太值得我们去看去写了,虽然还没看完,就想停下来动笔去写写这样忘得才能慢一点.&lt;br&gt;待续—–&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;/usr/local/Cellar/python3/3.4.3_1/Frameworks/Python.framework/Versions/3.4&lt;/p&gt;
&lt;!--TOC--&gt;
&lt;h2&gt;&lt;span id=&quot;目录1&quot;&gt;目录1&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;App后台开发运维和架构实践&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;目录2&quot;&gt;目录2&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;App后台开发运维和架构实践&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/newjueqi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;作者 CSDN&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.amazon.cn/App后台开发运维和架构实践-曾健生/dp/B01F5SYZPC/ref=sr_1_1?ie=UTF8&amp;amp;qid=1465010602&amp;amp;sr=8-1&amp;amp;keywords=App后台开发运维和架构实践&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;App后台开发运维和架构实践购买地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
      <category term="后台" scheme="http://0x002.top/categories/Android/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="App 后台开发运维和架构实践" scheme="http://0x002.top/tags/App-%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4%E5%92%8C%E6%9E%B6%E6%9E%84%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>Gradle多版本差异化管理</title>
    <link href="http://0x002.top/2016/05/25/gradle-diff-flavors/"/>
    <id>http://0x002.top/2016/05/25/gradle-diff-flavors/</id>
    <published>2016-05-25T03:29:49.000Z</published>
    <updated>2018-05-31T05:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们来说一说Gradle多版本差异化管理，在实际开发中我们往往经常需要打不同的APK来满足我们不同需求。不用手动改来改去一些多余的需求，用我们AS+Gradle就可以完美解决。废话不多说，开车。</p><a id="more"></a><p>先看图，我们通过切换不同的Build Variant，生成我们需要的APK</p><p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f47i5u30z6j30ek0omjti.jpg" width="240dp" height="300dp"></p><p>下面我们来看看在AS中我们要如何展开这项工作的，在我们app的gradle配置中我们只需要这么做，首先我们要明确两个概念</p><blockquote><ol><li>buildTypes<br>可以为不同的用户、不同的渠道打包不同的apk包，以便在程序行为上针对不同使用需求做少量定制（如是否可以更改远程服务器地址等)</li><li>productFlavors<br>productFlavors主要针对于”不同的版本之间差异非常小，本质上是同一应用”这种情况。可以根据渠道不同在版本名中增加相应后缀，可以根据特殊客户要求打包不同 ApplicationID 的apk包，并可分别使用不同的资源文件（如不同的应用图标等）</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &amp;#123;</span><br><span class="line"> applicationId <span class="string">"android.com.test"</span></span><br><span class="line">&amp;#125;</span><br><span class="line">productFlavors &amp;#123;</span><br><span class="line">pro &amp;#123;</span><br><span class="line"> applicationId <span class="string">"android.com.test.pro"</span></span><br><span class="line">&amp;#125;</span><br><span class="line">free &amp;#123;</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>这里可以看到我们加了productFlavors，里面一个pro版，一个free版，我们为高级版的定了不同的applicationId，而普通版的就是使用我们默认的applicationId，gradle中简单配置就先这样了。<br>然后我们需要在src目录下面新建我们刚刚加的两个渠道</p><p><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f47lej96nwj30b809yq3e.jpg" width="200dp" height="250dp"></p><p>快速生成我们的java，res目录，新建一个空Activity就好了，然后在里面植入我们需要的代码，下面贴上代码。</p><p><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f47qivm38oj30f40m875r.jpg" alt=""></p><p>这里我在pro，free文件中各自新建了一个自定义的MyView，里面代码很简单</p><p>free:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span>&amp;#123</span>;</span><br><span class="line"> <span class="keyword">super</span>(context);</span><br><span class="line"> LayoutInflater inflater =  (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line"> View inflate = inflater.inflate(R.layout.free, <span class="keyword">null</span>);</span><br><span class="line"> setContentView(inflate);</span><br><span class="line"> &amp;#125;</span><br></pre></td></tr></table></figure><p>pro:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> &amp;#123</span>;</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">View inflate = inflater.inflate(R.layout.pro, <span class="keyword">null</span>);</span><br><span class="line">setContentView(inflate);</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>然后我们就可以在main文件中的Activity去调用他们了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">viewById.setOnClickListener(new View.OnClickListener() &amp;#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> &amp;#123</span>;</span><br><span class="line">MyView myView = <span class="keyword">new</span> MyView(Activity.<span class="keyword">this</span>);</span><br><span class="line">myView.show();</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;);</span><br></pre></td></tr></table></figure><p>这里自定义的一个dialog，你自定义啥都行，你也可以写Activity，然后main里面跳转，都是可以的。<br>如果想把pro的apk名字改一下也和简单，正常处理就好了，在strings.xml目录中加入app_name就好了，然后下面到了最后一步</p><p><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f47mqtf8bqj30n40ew41b.jpg" alt=""></p><p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f47mras6nnj30lk0bqjs9.jpg" alt=""></p><p>可以看到这里有四个版本，分别对应我们设置的debug，release版本，选择运行，这样就可以在手机上面显示我们自己的两个apk了!!!</p><p>这里需要注意的是我们新建flavors文件要看好了，注意它们的依赖关系，我们新建的布局文件记得依赖当前文件，不是依赖main文件哦。不然会出问题的！</p><p>参考文章<br><a href="http://chobitly.github.io/2016/02/05/Android-Gradle-Build/" target="_blank" rel="noopener">利用 Android Studio 和 Gradle 打包多版本APK</a></p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们来说一说Gradle多版本差异化管理，在实际开发中我们往往经常需要打不同的APK来满足我们不同需求。不用手动改来改去一些多余的需求，用我们AS+Gradle就可以完美解决。废话不多说，开车。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先看图，我们通过切换不同的Build Variant，生成我们需要的APK&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005yqym4gw1f47i5u30z6j30ek0omjti.jpg&quot; width=&quot;240dp&quot; height=&quot;300dp&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面我们来看看在AS中我们要如何展开这项工作的，在我们app的gradle配置中我们只需要这么做，首先我们要明确两个概念&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;buildTypes&lt;br&gt;可以为不同的用户、不同的渠道打包不同的apk包，以便在程序行为上针对不同使用需求做少量定制（如是否可以更改远程服务器地址等)&lt;/li&gt;
&lt;li&gt;productFlavors&lt;br&gt;productFlavors主要针对于”不同的版本之间差异非常小，本质上是同一应用”这种情况。可以根据渠道不同在版本名中增加相应后缀，可以根据特殊客户要求打包不同 ApplicationID 的apk包，并可分别使用不同的资源文件（如不同的应用图标等）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;defaultConfig &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 applicationId &lt;span class=&quot;string&quot;&gt;&quot;android.com.test&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;productFlavors &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pro &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 applicationId &lt;span class=&quot;string&quot;&gt;&quot;android.com.test.pro&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	free &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里可以看到我们加了productFlavors，里面一个pro版，一个free版，我们为高级版的定了不同的applicationId，而普通版的就是使用我们默认的applicationId，gradle中简单配置就先这样了。&lt;br&gt;然后我们需要在src目录下面新建我们刚刚加的两个渠道&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005yqym4gw1f47lej96nwj30b809yq3e.jpg&quot; width=&quot;200dp&quot; height=&quot;250dp&quot;&gt;&lt;/p&gt;
&lt;p&gt;快速生成我们的java，res目录，新建一个空Activity就好了，然后在里面植入我们需要的代码，下面贴上代码。&lt;/p&gt;
    
    </summary>
    
      <category term="AndroidStudio" scheme="http://0x002.top/categories/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://0x002.top/tags/AndroidStudio/"/>
    
      <category term="Gradle" scheme="http://0x002.top/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>Mac上的一些高效而又不为人知的小工具</title>
    <link href="http://0x002.top/2016/05/11/mac-efficient-tools/"/>
    <id>http://0x002.top/2016/05/11/mac-efficient-tools/</id>
    <published>2016-05-11T02:48:44.000Z</published>
    <updated>2018-05-30T12:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上也有很多的介绍如何玩转你的Mac，For example<a href="https://www.zhihu.com/question/20873070" target="_blank" rel="noopener">程序员如何优雅地使用 Mac？</a>知乎的这一篇就很不错，当然还有很多，但是今天我还要去写，写我自己一直在用的，而且用的很给力的一些小工具介绍给大家。</p><a id="more"></a><p>用Mac也快一年了，先晒一下我一直在用的一些(多图预警，请注意)</p><p><img src="http://ww2.sinaimg.cn/large/005yqym4gw1f3r9ibobpsj31kw0teah0.jpg" alt="-c"><br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3r9m466a8j31kw0u6n48.jpg" alt="-c"><br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3r9o6ci0fj31kw0fctbk.jpg" alt="-c"><br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3r9noms48j31kw0etq53.jpg" alt="-c"><br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3r9l0rgmyj31kw08xjtc.jpg" alt="-c"></p><p>当然还有一些例如QQ，微信，邮箱等啊，这些基本属于必备用品了，这里不多说，上面晒出的5张图是我的5个分类，大家可能也能看出来，这里捡一些好玩而且经常用到的Application来一起看看。</p><ul><li><a href="https://github.com/mortenjust/droptogif" target="_blank" rel="noopener">Drop to Gif</a></li></ul><p>见名知意，就是将我们平时的一些小视频转成GIF的一个小工具。附上他的一个使用效果<br><img src="https://raw.githubusercontent.com/mortenjust/droptogif/master/ux/demos/demo_dragon.gif" alt="-c"></p><ul><li><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="noopener">CheatSheet</a></li></ul><p>CheatSheet 做的事情很简单，就是在你使用任何软件的时候，长按Command键，即可显示当前软件的所有快捷键。通过这个提示功能，便能快速地找到你想要的快捷键.下面是在Android Studio上面的使用情景<br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3rel5vvwcj31ci0gvq7z.jpg" alt="-c"></p><ul><li>Sip</li></ul><p>之前推荐的ColorPicker，但是最近却在App Store上面发现了一个更给力的吸色工具，那就是Sip，<br>具体可以去App Store上面看，强大啊<br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f4fhzvo0v5j30ok1cy44p.jpg" alt="-c"></p><ul><li><a href="http://www.cockos.com/licecap/" target="_blank" rel="noopener">licecap</a></li></ul><p>Mac上面小巧的GIF格式录屏App，用户可以自定帧率和录制范围<br><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3rhylk54rj30o50hqacz.jpg" alt="-c"></p><ul><li><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred2</a></li></ul><p>可以替代Mac本家的Spotlight搜索的一款自定义的搜索App，这是一款收费软件，如果想玩workflow就要付费了。。。。<br>使用的话看他就够了<br><a href="https://www.zhihu.com/question/20656680" target="_blank" rel="noopener">借助 Alfred 2 的 Workflows 功能可以做哪些好玩的事情？</a><br><a href="http://www.jianshu.com/p/98f53faabbff" target="_blank" rel="noopener">小白使用</a><br><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3ri13w75uj30xu0hodig.jpg" alt="-c"></p><ul><li><a href="http://www.smartisan.com/apps/smartfinder" target="_blank" rel="noopener">SmartFinder</a></li></ul><p>一款Mac与Android机无缝连接的App，方便自如地管理您在 Android 手机中的内容，锤子出品！<br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3rf7m037fj307g0iq74s.jpg" alt="-c"></p><ul><li><a href="http://snip.qq.com/" target="_blank" rel="noopener">Snip</a></li></ul><p>一款简单的截图工具，可以滚动截屏</p><ul><li><a href="https://macid.co/" target="_blank" rel="noopener">MacID</a></li></ul><p>可以根据手机的蓝牙信号强度（设备间距离越大信号越弱）来控制是否自动解锁或者锁定 Mac。新版本的 MacID 还支持在设备间传递剪贴板内容，感觉又可以少装一个剪贴板传递的应用。<br><a href="http://sspai.com/32055" target="_blank" rel="noopener">教程</a><br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3rfcoov8cj306f08u3yy.jpg" alt="-c"></p><ul><li><a href="http://www.getmarkman.com/" target="_blank" rel="noopener">Mark Man</a></li></ul><p>一款设计稿标注，测量工具。极大节省设计师在设计稿上添加和修改标注的时间，让设计更有爱哦<br><img src="http://www.getmarkman.com/static/img/functions.png" alt="-c"></p><ul><li><a href="http://enjoygineering.com/mounty/" target="_blank" rel="noopener">Mounty</a></li></ul><p>安装<code>brew cask install mounty</code>，Mounty 这个小软件虽然小但是功能挺实用的. 当你插入 NTFS 硬盘后会提示是否创新加载成读写模式. 尤其是写入模式很重要. 因为 Mac OS X 默认没有开启 NTFS 的写入模式. 这样不在需要安装其他软件就可以对 Windows 的 NTFS 硬盘进行复制文件操作啦.当有硬盘接入的时候会显示是否装载成写入模式 , 点击 YES 即可. </p><ul><li><a href="http://manico.im/" target="_blank" rel="noopener">Manico</a></li></ul><p>是一个为 OS X 设计的快速的 App 启动和切换工具，网站上面说的很清楚了已经这里就不阐述了。<br><img src="http://ww2.sinaimg.cn/large/005yqym4gw1f3rfja6g8sj30c401g74f.jpg" alt="-c"></p><ul><li>iSart Menus</li><li>Dr Cleaner</li></ul><p>一款OSX App，清理磁盘和内存，应用程序卸载，系统优化，App Store上面即可下载，今天刚更新的，已经集成了iStart Menus的功能，所以上面的就没介绍了。<br><img src="http://a1.mzstatic.com/us/r30/Purple18/v4/5a/07/18/5a071851-0448-bb01-245f-cb2e1e95c66c/screen800x500.jpeg" alt="-c"></p><ul><li><a href="http://unarchiver.c3.cx/unarchiver" target="_blank" rel="noopener">The Unarchiver</a></li></ul><p>一款小巧的解压缩App，可以使用它解压多达30种不同的压缩格式文件</p><ul><li><a href="http://www.deprez.org/folio_0028_en.html" target="_blank" rel="noopener">ShowOrHide</a></li></ul><p>简单的替换了命令行，可查看隐藏文件的一个小巧的App，简单的不要不要的<br><img src="http://ww2.sinaimg.cn/large/005yqym4gw1f3rfpyi9b1j30ha07qjrx.jpg" alt="-c"></p><ul><li><a href="https://github.com/mortenjust/androidtool-mac" target="_blank" rel="noopener">AndroidTool</a></li></ul><p>代替了你的<code>adb install xx.apk</code>，点击apk就可安装到你手机的一个玩意。还可以对你的手机进行录屏操作，可以去官网查看<br><img src="https://raw.githubusercontent.com/mortenjust/androidtool-mac/master/Demos/installapk.gif" alt="-c"></p><ul><li><a href="https://pqrs.org/osx/karabiner/" target="_blank" rel="noopener">Karabiner</a></li></ul><p>这是一个自定义键盘的一个小软件，用外接机械键盘的小伙伴可以用到这玩意哦。<br><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3rfwxobnqj30m7091abi.jpg" alt="-c"></p><ul><li><a href="https://www.teamviewer.com/zhCN/?pid=google.tv_ex_en.s.jp&amp;gclid=CjwKEAjwjca5BRCAyaPGi6_h8m8SJADryPLhHxJXh62UA28rzsuE-IpI76BwkQOE6XpGH7XyLAGjiRoCceXw_wcB" target="_blank" rel="noopener">teamViewer</a></li></ul><p>远程协作的一个在线会议软件。<br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3rfz9dvtjj30np0c7401.jpg" alt="-c"></p><ul><li><a href="https://bitbucket.org/galad87/subler/wiki/Home" target="_blank" rel="noopener">Subler</a></li></ul><p>是一个讲视频和字幕合成一体的一个软件。我们有时候看美剧可能没有字幕，但是我们又下载了字幕，还要导入或者一些什么，但是有了这个东西就方便了，我们直接合成就好了。最后file－save<br><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3rg34px9oj31280i6q7c.jpg" alt="-c"></p><ul><li><a href="https://lastpass.com/zh-hans/" target="_blank" rel="noopener">LastPass</a></li></ul><p>Mac上面的密码管理工具，需要付费，LastPass帮助文档,入门够了<br><a href="https://helpdesk.lastpass.com/zh/" target="_blank" rel="noopener">help文档</a></p><ul><li><a href="http://dcloud.io/" target="_blank" rel="noopener">HBuilder</a></li></ul><p>一款HTML5 IDE，超爽<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rgcyn6dlj30pl0dv400.jpg" alt="-c"></p><ul><li><a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a></li></ul><p>Mac 下常用的网络封包截取工具，付费软件，但是好用的不得了。想驾驭它，看他就够了<br><a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="noopener">Charles 从入门到精通</a></p><ul><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm</a></li></ul><p>之前有一篇文章介绍过它<a href="http://yupengt66y.wang/2016/01/12/iTermConfiguration/" target="_blank" rel="noopener">iTerm新手必知</a><br>还有一篇文章也不错<a href="https://laoshuterry.gitbooks.io/mac_os_setup_guide/content/4_ZshConfig.html" target="_blank" rel="noopener">iTerm配置</a></p><ul><li><a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a></li></ul><p>付费买的一个markDown编辑器，Mou，markdown也有用过，感觉总是少点什么，但是用了它之后就想过换啊，去官网看他的牛逼功能介绍吧。有付费版，免费版，如果对他要求不高的话，免费足够用了！！<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rgmhcj12j31kw0zfgnf.jpg" alt="-c"></p><ul><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a></li></ul><p>如果你对git命令用的不6，那么就来用它吧，英文，中文，都有，免费，功能强大，这些能吸引你吗？<br><img src="https://www.sourcetreeapp.com/images/hero_mac_all.png" alt="-c"></p><ul><li><a href="http://www.sublimetext.com/3" target="_blank" rel="noopener">Sublim Text3</a></li></ul><p>代码编辑器或者文本编辑器，跨平台支持Win/Mac/Linux，支持32与64位，支持各种流行编程语言的语法高亮、代码补全等<br><a href="http://www.jianshu.com/p/3cb5c6f2421c" target="_blank" rel="noopener">如何优雅的使用SublimeText3</a><br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rgtrcp11j31kw0eg0wm.jpg" alt="-c"></p><ul><li><p><a href="https://confluence.jetbrains.com/display/WI/WebStorm+EAP" target="_blank" rel="noopener">WebStormEAP</a></p></li><li><p><a href="https://confluence.jetbrains.com/display/PhpStorm/PhpStorm+Early+Access+Program" target="_blank" rel="noopener">PHPStormEAP</a></p></li></ul><p><a href="https://www.zhihu.com/question/20936155" target="_blank" rel="noopener">webstorm过人之处</a><br>用法自行搜索就好了。</p><p>上面这两款软件都是出自一家，但是要付费，你可以付费，但是挺贵，你可以去找一些破解版的，一个注册码，但是用着感觉不舒服，上面给出的均是EAP版，不用付费，不用破解，功能几乎完全够你用的啦。</p><ul><li><a href="https://mindnode.com/" target="_blank" rel="noopener">MindNote</a></li></ul><p>头脑风暴思维导图软件<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rgxd18efj31dy0roq4n.jpg" alt="-c"></p><ul><li>Dash</li></ul><p>App Store上面即可下载，程序员的好帮手，强悍的API文档浏览，搜索功能<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rgzvtp73j30pu0bkq4b.jpg" alt="-c"></p><ul><li><a href="http://www.hopperapp.com/" target="_blank" rel="noopener">Hopper</a></li></ul><p>一款反汇编工具：Hopper，它有OS X和Linux版本，能够反汇编32/64位Mac，Linux，Windows和iOS可执行文件。<br><a href="http://security.ios-wiki.com/issue-3-8/" target="_blank" rel="noopener">Hopper工具使用</a><br>将我们的可执行文件拖进去即可。<br><img src="http://ww2.sinaimg.cn/large/005yqym4gw1f3rh3ii8qej31kw0ben1c.jpg" alt="-c"></p><ul><li><a href="http://weiboformac.sinaapp.com/" target="_blank" rel="noopener">WeiboX</a></li></ul><p>微博的Mac客户端，不介绍<br><img src="http://weiboformac.sinaapp.com/images/screen2.png" alt="-c"></p><ul><li>Moviest</li></ul><p>Mac上面的一个第三方视频播放软件，App Store可下载。</p><p>下面这些参考stormzhang的来看比较好<br><a href="http://stormzhang.com/devtools/2016/01/15/google-chrome-extension/" target="_blank" rel="noopener">私人珍藏的Chrome插件,吐血推荐</a></p><ul><li>Chrome ADB</li><li>Vysor</li><li>Postman</li><li>pocket</li><li>momentum</li><li>YouTube</li><li>Gliffy Diagrams</li></ul><p>介绍一下最后一个，一个专业的流程图软件<br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f3rhawlj1sj31kw0rp7d0.jpg" alt="-c"></p><p>以上这些去<br><a href="https://chrome.google.com/webstore/category/extensions?hl=zh-CN" target="_blank" rel="noopener">Chrome网上商店</a><br>均可下载。</p><ul><li><a href="https://evernote.com/intl/zh-cn/download/" target="_blank" rel="noopener">Evernote</a></li></ul><p>印象笔记，用这个可以将我们在chrome上浏览好的内容保存在我们印象笔记中，去下载插件就好了<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rhf4nxlcj30cn02g3yo.jpg" alt="-c"></p><p>还有一个给力的地方就是我们用微信关注他的官方公众号，然后将我们在公众号上面看到的好文章保存到我们的印象笔记中，岂不是极好极好的。</p><ul><li>PDF Reader</li></ul><p>PDF阅读软件，App Store即可下载。</p><ul><li><a href="https://www.wunderlist.com/zh/" target="_blank" rel="noopener">奇妙清单</a></li></ul><p>计划你的一些日程，随时收到提醒，跨平台让你的生活保持同步。<br><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3rhjvzfk6j31cs0tc460.jpg" alt="-c"></p><p>这里还有一些Chrome的插件介绍，<br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3rhkxtayfj30gj032q33.jpg" alt="-c"></p><p>一个广告屏蔽插件<br><img src="http://ww3.sinaimg.cn/large/005yqym4gw1f3rhlnp45cj30gn039t8u.jpg" alt="-c"></p><p>见名知意<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rhm52yb1j30g903d0st.jpg" alt="-c"></p><p>下两个见stormzhang博客<br><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rhmlcrrjj30fu034dfw.jpg" alt="-c"></p><p><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f3rhn0irrkj30g203274e.jpg" alt="-c"></p><ul><li><a href="http://zythum.sinaapp.com/youkuhtml5playerbookmark/" target="_blank" rel="noopener">妈妈再也不用担心我的macbook发烫了</a></li></ul><p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3rhnim0duj30fx02lweg.jpg" alt="-c"></p><p>一个很好用的博客图片链接生成插件(微博图床)</p><p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f3rhnu7jtrj30g60323yp.jpg" alt="-c"></p><ul><li><a href="http://git.oschina.net/sinceow/LunarCalendar#git-readme?utm_source=www.appinn.com" target="_blank" rel="noopener">Mac上面一款万年历</a></li></ul><p><img src="http://ww4.sinaimg.cn/large/005yqym4gw1f4lme9q34oj31820ogtco.jpg" alt="-c"><br>怎么样，还可以吧</p><ul><li><a href="https://www.trankynam.com/xtrafinder/" target="_blank" rel="noopener">XtraFinder多样化你的Finder</a></li></ul><p>可以像chrome浏览器一样，tab多开，可以拷贝路径，可以右键新建文件，文件夹…..反正事中文版的，去设置里面看一下，就知道有没有你想要的啦！！</p><p>还有就是百度云盘在Mac上面基本是难用到恶心啊，这里之前我也说过可以有一个插件帮我们搞定这恶心的事情<br><a href="http://blog.csdn.net/dakaring/article/details/46517073" target="_blank" rel="noopener">百度云盘在Mac上的威力</a></p><p>还有一些Mac本身的小技巧<br><a href="http://bbs.feng.com/read-htm-tid-5175817.html" target="_blank" rel="noopener">你可能不知道的小技巧</a><br>Mac上面用机械键盘的壕友们这里也有你们的福利<br><a href="http://bbs.feng.com/read-htm-tid-8746599.html" target="_blank" rel="noopener">OS X下机械键盘的设置和技巧（不仅仅是改苹果键）</a><br><a href="http://www.zhihu.com/question/35050387/answer/72185393?f3fb8ead20=fe19159a03463a82562355da6b7bda6d" target="_blank" rel="noopener">OSX 下一些冷门但是一旦发现就无法自拔的软件</a><br>谢谢你在这多图预警下看到这里了，这里面肯定有你用到的也有你没有用到的，哪怕只有一个能帮助你，也值了啊！</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上也有很多的介绍如何玩转你的Mac，For example&lt;a href=&quot;https://www.zhihu.com/question/20873070&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;程序员如何优雅地使用 Mac？&lt;/a&gt;知乎的这一篇就很不错，当然还有很多，但是今天我还要去写，写我自己一直在用的，而且用的很给力的一些小工具介绍给大家。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;用Mac也快一年了，先晒一下我一直在用的一些(多图预警，请注意)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/005yqym4gw1f3r9ibobpsj31kw0teah0.jpg&quot; alt=&quot;-c&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005yqym4gw1f3r9m466a8j31kw0u6n48.jpg&quot; alt=&quot;-c&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005yqym4gw1f3r9o6ci0fj31kw0fctbk.jpg&quot; alt=&quot;-c&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/005yqym4gw1f3r9noms48j31kw0etq53.jpg&quot; alt=&quot;-c&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005yqym4gw1f3r9l0rgmyj31kw08xjtc.jpg&quot; alt=&quot;-c&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然还有一些例如QQ，微信，邮箱等啊，这些基本属于必备用品了，这里不多说，上面晒出的5张图是我的5个分类，大家可能也能看出来，这里捡一些好玩而且经常用到的Application来一起看看。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mortenjust/droptogif&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Drop to Gif&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;见名知意，就是将我们平时的一些小视频转成GIF的一个小工具。附上他的一个使用效果&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/mortenjust/droptogif/master/ux/demos/demo_dragon.gif&quot; alt=&quot;-c&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mediaatelier.com/CheatSheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CheatSheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CheatSheet 做的事情很简单，就是在你使用任何软件的时候，长按Command键，即可显示当前软件的所有快捷键。通过这个提示功能，便能快速地找到你想要的快捷键.下面是在Android Studio上面的使用情景&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/005yqym4gw1f3rel5vvwcj31ci0gvq7z.jpg&quot; alt=&quot;-c&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sip&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="工具" scheme="http://0x002.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac小工具" scheme="http://0x002.top/tags/Mac%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>小白学Android之adb篇(三)</title>
    <link href="http://0x002.top/2016/04/18/adb-study-03/"/>
    <id>http://0x002.top/2016/04/18/adb-study-03/</id>
    <published>2016-04-18T14:27:44.000Z</published>
    <updated>2018-05-30T12:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们之前一起看了adb和adb logcat的一些简单命令，今天我们在一起来看看adb还有什么好玩的值得我们说的。<br>如何通过adb命令来安装一个App和卸载一个App，简单的命令就可以简化我们的手动安装与卸载<br><code>adb install test.apk</code> || <code>adb unistall test.apk</code><br>简单的两行命令实现我们的需要。</p><a id="more"></a><p>试想一下如果我们有这么一个需求，在测试的时候如果之前有一台手机安装过这个App，但是如果版本不一样，继续去安装，就会提示已存在，请卸载在安装，但是又没有命令帮我们，卸载还有安装同步执行哪，当然有了，<br><code>adb install -r test.apk</code><br>-r就是replace的意思，明白了吧。<br>上面只是一些很简单，很小儿科的东西，下面我们讲一些高级一点，好玩的东西。<br><code>adb pm || adb am || adb wm</code><br>这是三个很重要的命令<br>pm就是PackageManager，am就是ActivityManager，wm就是WindowManager。<br>下面我们依次来看一看。<br><strong>pm</strong><br>试想我们有这么一个需求，就是我们所说的启动页，我们平时开发要做App的启动页大多数用Sp去做，但是这东西只有App第一次安装的时候才会出现，所以我们如果想测试，就必须卸载App然后安装App在进行测试，有没有命令帮我们搞定哪，有的同学会说了上面不是有卸载＋安装的命令啊，确实，但是这样显得有点Low，下面我们可以这样做。<br><code>adb shell pm clear packageName</code><br>清空我们App的缓存，相当于App第一次安装。<br>可能有的人又说了，我们自己的App可能知道包名，其他的怎么办哪？当然也是有办法的，<br><code>adb shell pm list package</code><br>查看手机所有的包名。<br>在这些输出打印当中你可能会发现有手机系统自己的系统包名，有我们安装的第三方应用的包名，那这样可不可以区分哪，当然也是可以的。<br><code>adb shell pm list package -3</code> || <code>adb shell pm list package -s</code><br>前者是列出第三方包名，后者是列出系统包名。<br>我们还可以查看这些App的安装来源，路径。<br><code>adb shell pm list package -i</code> || <code>adb shell pm list package -f</code><br>还有一个命令打印出来的信息太全面了<br><code>adb shell pm dump packageName</code><br>源码在此，这个网站可以很好的帮我们在线查看Android源码<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.2_r1/com/android/commands/pm/Pm.java#Pm" target="_blank" rel="noopener">Pm.java</a><br>下面我们来看<strong>am</strong><br>顾名思义，通过它我们可以启动一些和四大组件相关的东西。<br>for example我们通过它来打开一个网页<br><code>adb shell am start -a android.intent.action.VIEW -d http://www.baidu.com</code><br>神奇的一幕出现，回车，手机上面自己打开了一个网页。<br>如果我们还想让它打电话<br><code>adb shell am start -a android.intent.action.CALL -d tel:10086</code><br>刚刚说了是启动四大组件，那肯定是和他们有关系啊。<br>启动一个service<br><code>adb shell am startservice -n packageName/claaName</code><br>解释一下，为什么上面是-a，这个是-n实际上这个地方写-n也行，区别就是-a是action的意思，-n是name的意思，service的路径一定要写全。<br><code>adb shell am broadcast -a actionname</code><br><code>adb shell am startactivity -n classname</code><br>不解释。<br>Am源码在此<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.4_r1/com/android/commands/am/Am.java#Am" target="_blank" rel="noopener">Am.java</a><br>最后一个看看<strong>Wm</strong><br>是和手机屏幕打交道的一个命令。<br>它可以帮我们取出手机的尺寸，密度等信息<br><code>adb shell wm size</code><br><code>adb shell wm density</code><br>一个尺寸一个密度，完美<br>源码在此<a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.0_r1/com/android/commands/wm/Wm.java?av=f" target="_blank" rel="noopener">Wm.java</a><br>今天的东西比较实用，后面可能还会继续去写这个东西，最近爱上了命令这个东西，因为Mac上面的终端实在是太可爱了，各位晚安，夜深了！！！！</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们之前一起看了adb和adb logcat的一些简单命令，今天我们在一起来看看adb还有什么好玩的值得我们说的。&lt;br&gt;如何通过adb命令来安装一个App和卸载一个App，简单的命令就可以简化我们的手动安装与卸载&lt;br&gt;&lt;code&gt;adb install test.apk&lt;/code&gt; || &lt;code&gt;adb unistall test.apk&lt;/code&gt;&lt;br&gt;简单的两行命令实现我们的需要。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;试想一下如果我们有这么一个需求，在测试的时候如果之前有一台手机安装过这个App，但是如果版本不一样，继续去安装，就会提示已存在，请卸载在安装，但是又没有命令帮我们，卸载还有安装同步执行哪，当然有了，&lt;br&gt;&lt;code&gt;adb install -r test.apk&lt;/code&gt;&lt;br&gt;-r就是replace的意思，明白了吧。&lt;br&gt;上面只是一些很简单，很小儿科的东西，下面我们讲一些高级一点，好玩的东西。&lt;br&gt;&lt;code&gt;adb pm || adb am || adb wm&lt;/code&gt;&lt;br&gt;这是三个很重要的命令&lt;br&gt;pm就是PackageManager，am就是ActivityManager，wm就是WindowManager。&lt;br&gt;下面我们依次来看一看。&lt;br&gt;&lt;strong&gt;pm&lt;/strong&gt;&lt;br&gt;试想我们有这么一个需求，就是我们所说的启动页，我们平时开发要做App的启动页大多数用Sp去做，但是这东西只有App第一次安装的时候才会出现，所以我们如果想测试，就必须卸载App然后安装App在进行测试，有没有命令帮我们搞定哪，有的同学会说了上面不是有卸载＋安装的命令啊，确实，但是这样显得有点Low，下面我们可以这样做。&lt;br&gt;&lt;code&gt;adb shell pm clear packageName&lt;/code&gt;&lt;br&gt;清空我们App的缓存，相当于App第一次安装。&lt;br&gt;可能有的人又说了，我们自己的App可能知道包名，其他的怎么办哪？当然也是有办法的，&lt;br&gt;&lt;code&gt;adb shell pm list package&lt;/code&gt;&lt;br&gt;查看手机所有的包名。&lt;br&gt;在这些输出打印当中你可能会发现有手机系统自己的系统包名，有我们安装的第三方应用的包名，那这样可不可以区分哪，当然也是可以的。&lt;br&gt;&lt;code&gt;adb shell pm list package -3&lt;/code&gt; || &lt;code&gt;adb shell pm list package -s&lt;/code&gt;&lt;br&gt;前者是列出第三方包名，后者是列出系统包名。&lt;br&gt;我们还可以查看这些App的安装来源，路径。&lt;br&gt;&lt;code&gt;adb shell pm list package -i&lt;/code&gt; || &lt;code&gt;adb shell pm list package -f&lt;/code&gt;&lt;br&gt;还有一个命令打印出来的信息太全面了&lt;br&gt;&lt;code&gt;adb shell pm dump packageName&lt;/code&gt;&lt;br&gt;源码在此，这个网站可以很好的帮我们在线查看Android源码&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.2_r1/com/android/commands/pm/Pm.java#Pm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pm.java&lt;/a&gt;&lt;br&gt;下面我们来看&lt;strong&gt;am&lt;/strong&gt;&lt;br&gt;顾名思义，通过它我们可以启动一些和四大组件相关的东西。&lt;br&gt;for example我们通过它来打开一个网页&lt;br&gt;&lt;code&gt;adb shell am start -a android.intent.action.VIEW -d http://www.baidu.com&lt;/code&gt;&lt;br&gt;神奇的一幕出现，回车，手机上面自己打开了一个网页。&lt;br&gt;如果我们还想让它打电话&lt;br&gt;&lt;code&gt;adb shell am start -a android.intent.action.CALL -d tel:10086&lt;/code&gt;&lt;br&gt;刚刚说了是启动四大组件，那肯定是和他们有关系啊。&lt;br&gt;启动一个service&lt;br&gt;&lt;code&gt;adb shell am startservice -n packageName/claaName&lt;/code&gt;&lt;br&gt;解释一下，为什么上面是-a，这个是-n实际上这个地方写-n也行，区别就是-a是action的意思，-n是name的意思，service的路径一定要写全。&lt;br&gt;&lt;code&gt;adb shell am broadcast -a actionname&lt;/code&gt;&lt;br&gt;&lt;code&gt;adb shell am startactivity -n classname&lt;/code&gt;&lt;br&gt;不解释。&lt;br&gt;Am源码在此&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.4.4_r1/com/android/commands/am/Am.java#Am&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Am.java&lt;/a&gt;&lt;br&gt;最后一个看看&lt;strong&gt;Wm&lt;/strong&gt;&lt;br&gt;是和手机屏幕打交道的一个命令。&lt;br&gt;它可以帮我们取出手机的尺寸，密度等信息&lt;br&gt;&lt;code&gt;adb shell wm size&lt;/code&gt;&lt;br&gt;&lt;code&gt;adb shell wm density&lt;/code&gt;&lt;br&gt;一个尺寸一个密度，完美&lt;br&gt;源码在此&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.1.0_r1/com/android/commands/wm/Wm.java?av=f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wm.java&lt;/a&gt;&lt;br&gt;今天的东西比较实用，后面可能还会继续去写这个东西，最近爱上了命令这个东西，因为Mac上面的终端实在是太可爱了，各位晚安，夜深了！！！！&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="Android奇技淫巧" scheme="http://0x002.top/tags/Android%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
      <category term="adb" scheme="http://0x002.top/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>小白学Android之adb篇(二)</title>
    <link href="http://0x002.top/2016/04/14/adb-study-02/"/>
    <id>http://0x002.top/2016/04/14/adb-study-02/</id>
    <published>2016-04-14T08:50:29.000Z</published>
    <updated>2018-05-30T12:34:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇我们一起来看过adb的基础用法，这一次我们一起来看看adb logcat的用法</p><a id="more"></a><p>它在as中是长这样的<br><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f2wbnkbwudj31fu062gmc.jpg" alt=""><br>这是界面化的，今天要说的是他的命令，有几个比较实用而且比较重要的。<br>第一篇就说过学命令之前把他的help敲出来看看是什么，我们敲了<br><code>adb logcat --help</code><br>出来下面这些，仅部分，可自敲看看。<br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbnt37x6j30z10cxwhz.jpg" alt=""><br><img src="http://ww4.sinaimg.cn/mw690/005yqym4gw1f2wbnzztsnj30yr05i74n.jpg" alt=""></p><p>有人会提出这样的质疑，as里面的logcat不是很好用吗，而且还很友好，但是不知道你有没有遇到这种情况，就是有某几款手机是没有log的或者在茫茫log中找我们的报错原因，甚至还找不到，或者有的就是一闪而过的log，是不是有种想骂街的冲动，没事，我们不是还有命令啊。<br>下面我以一个简单的demo来看看今天的logcat，在你的终端当中输入<code>adb logcat</code>会把你所有的log都输出来，这肯定不是我们想要的，我们要对他进行过滤，先看看as中的输出</p><p><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbo85g6hj30j70c5dke.jpg" alt=""><br>我对他进行了过滤显示这样，我们在终端只需这样，</p><p><code>adb logcat -s test</code><br><img src="http://ww1.sinaimg.cn/mw690/005yqym4gw1f2wbodkaa5j30yh0gbjul.jpg" alt=""><br>后面的test就是我们所说的tag，过滤 输出就这样，如果你继续操作，adb logcat只会累加，我们能不能执行一次，log就是我们所需要的那，可以，就是把之前的清掉就好了，<br><code>adb logcat -c</code><br>执行清空操作。已经简单了解过后我们下面来看看adb logcat -v这个命令<br><code>adb logcat -v --help</code><br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbojlzgzj30ym0hv0y6.jpg" alt=""></p><p>下面我们一起来看看其中的几个<br><code>adb logcat -v time -s test</code><br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbopj8bmj30yp0d70wi.jpg" alt=""><br>打印时间这一列</p><p><code>adb logcat -v process -s test</code><br><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f2wbowpmonj30ym0crjts.jpg" alt=""><br>打印进程这一列</p><p><code>adb logcat -v raw -s tag</code><br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbp4oeefj30yl0arwfr.jpg" alt=""><br>只打印我们log的内容，没有tag等其他信息</p><p><code>adb logcat -v long -s tag</code><br><img src="http://ww1.sinaimg.cn/mw690/005yqym4gw1f2wbpayyinj30ym0hxn09.jpg" alt=""><br>几乎会把所有的log信息给我们</p><p><code>adb logcat|grep -s tag</code><br><img src="http://ww4.sinaimg.cn/mw690/005yqym4gw1f2wbpgqre6j30yo09ggnb.jpg" alt=""><br>前面输出的内容当作grep的输入内容作为检索条件过滤</p><p><code>adb logcat -c&amp;&amp;adb logcat -s tag</code><br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbpmdsdpj30ym07975i.jpg" alt=""><br>先清除再打印。</p><p><code>adb logcat -s AndroidRuntime</code><br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbps6155j30yq0e7gt9.jpg" alt=""><br>当我们应用程序崩溃时有一些异常是捕捉不到的。这一招是很有用的</p><p><code>adb logcat&gt;&gt;log.txt</code><br><img src="http://ww4.sinaimg.cn/mw690/005yqym4gw1f2wbpxmqkfj30h301d0ss.jpg" alt=""><br>将我们的log信息导出到文件当中</p><p>下面用vim打开<br><code>vim log.txt</code><br><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f2wbq7vfbmj30ys07qjvm.jpg" alt=""><br>已经把log写入了。成功</p><p>今天的logcat就先到这里吧</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇我们一起来看过adb的基础用法，这一次我们一起来看看adb logcat的用法&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;它在as中是长这样的&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/005yqym4gw1f2wbnkbwudj31fu062gmc.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这是界面化的，今天要说的是他的命令，有几个比较实用而且比较重要的。&lt;br&gt;第一篇就说过学命令之前把他的help敲出来看看是什么，我们敲了&lt;br&gt;&lt;code&gt;adb logcat --help&lt;/code&gt;&lt;br&gt;出来下面这些，仅部分，可自敲看看。&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbnt37x6j30z10cxwhz.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/005yqym4gw1f2wbnzztsnj30yr05i74n.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有人会提出这样的质疑，as里面的logcat不是很好用吗，而且还很友好，但是不知道你有没有遇到这种情况，就是有某几款手机是没有log的或者在茫茫log中找我们的报错原因，甚至还找不到，或者有的就是一闪而过的log，是不是有种想骂街的冲动，没事，我们不是还有命令啊。&lt;br&gt;下面我以一个简单的demo来看看今天的logcat，在你的终端当中输入&lt;code&gt;adb logcat&lt;/code&gt;会把你所有的log都输出来，这肯定不是我们想要的，我们要对他进行过滤，先看看as中的输出&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbo85g6hj30j70c5dke.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我对他进行了过滤显示这样，我们在终端只需这样，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb logcat -s test&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005yqym4gw1f2wbodkaa5j30yh0gbjul.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;后面的test就是我们所说的tag，过滤 输出就这样，如果你继续操作，adb logcat只会累加，我们能不能执行一次，log就是我们所需要的那，可以，就是把之前的清掉就好了，&lt;br&gt;&lt;code&gt;adb logcat -c&lt;/code&gt;&lt;br&gt;执行清空操作。已经简单了解过后我们下面来看看adb logcat -v这个命令&lt;br&gt;&lt;code&gt;adb logcat -v --help&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbojlzgzj30ym0hv0y6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面我们一起来看看其中的几个&lt;br&gt;&lt;code&gt;adb logcat -v time -s test&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbopj8bmj30yp0d70wi.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;打印时间这一列&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb logcat -v process -s test&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/005yqym4gw1f2wbowpmonj30ym0crjts.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;打印进程这一列&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb logcat -v raw -s tag&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2wbp4oeefj30yl0arwfr.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;只打印我们log的内容，没有tag等其他信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb logcat -v long -s tag&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005yqym4gw1f2wbpayyinj30ym0hxn09.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;几乎会把所有的log信息给我们&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="Android奇技淫巧" scheme="http://0x002.top/tags/Android%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
      <category term="adb" scheme="http://0x002.top/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>小白学Android之adb篇(一)</title>
    <link href="http://0x002.top/2016/04/12/adb-study/"/>
    <id>http://0x002.top/2016/04/12/adb-study/</id>
    <published>2016-04-12T02:28:39.000Z</published>
    <updated>2018-05-30T12:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我们开始学习adb了！！！</p><a id="more"></a><p>Android开发中从Eclipse到现在的AndroidStudio，ADB起了主导作用，但是我们真正用命令来操控adb的时候并不多，开始windows上面的adb，经常被别人占用端口，现在换了Mac，这些困扰的问题也少了很多。<br>今天就和大家一起来学习学习adb的使用，开篇比较简单。adb在sdk中的platform-tools下，我们要把他配置到环境变量下，基于Mac。可以看我之前的一篇<a href="http://blog.csdn.net/dakaring/article/details/48295515" target="_blank" rel="noopener">快速配置adb</a>这里就不说了。</p><p><code>adb version</code></p><p>显示<br><code>Android Debug Bridge version 1.0.35Revision 102d0d1e73de-android</code><br>这是我的adb版本，我们能看出来，adb的全称Android Debug Bridge。</p><p>我们在使用任何命令之前记得敲他的help肯定没有错，我们输入<br><code>adb help</code><br>这里只贴出一部分<br><img src="http://ww1.sinaimg.cn/mw690/005yqym4gw1f2tr3meonxj30p10lote8.jpg" alt=""><br>如果你对英文技术文档很敏感，完全可以自己明白这些命令的意思，无非就是adb后面加上他呗。下面我们捡几个重要的一起来看一下。<br>我们一起来看一下，如果我们想知道我们的电脑上有几个设备，输入<br><code>adb devices</code><br><img src="http://ww1.sinaimg.cn/mw690/005yqym4gw1f2tuy7z0j8j318y0500ts.jpg" alt=""><br>我这里有两个，一个是模拟器，一个是真机，那么我们如果要想针对某一个机器进行操作，我们输入<br><code>adb shell</code><br>但是给我们的却不是我们想要的，<br><code>error: more than one device/emulator</code><br>这并没有什么问题，因为你执行这么一句，机器并不知道你是要操作真机还是模拟器，所以我们要把他的序列码加上就好了。指定设备进行操作。<br>help中有这么一行命令<img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f2ts7f77fkj30mj019q30.jpg" alt=""><br>然后我门这样来搞，<br><code>adb -s 4e934820 shell</code><br>这里我们对我们的真机进行操作，回车这里已经成功进入到我们的真机，输入ls，查看真机的所有目录<br><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f2tuzcjzkmj318y0rqn2m.jpg" alt=""><br>输入exit退出。还有一种方法感觉高大上，还是回顾我们的help命令有这么两行，可以简单帮我们搞定<img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2ts857ayhj30mm03awf0.jpg" alt=""><br>-d 也就是我们的USBDevice<br>-e 也就是我们的emulator。<br>上面输入序列码的操作可以简单成<br><code>adb -d shell</code>|| <code>adb -e shell</code><br>直接对真机或者模拟器进行操作。<br>我们已经成功打入到我们的设备内部，那如果我们想从设备中拿我们需要的东西怎么办，或者把我们电脑上的东西放到我们的设备中去怎么办<br><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f2ts8edkccj30kf03zwf2.jpg" alt=""><br>help中有这么两个命令，是不是很熟悉，和我们在git中使用的场景含义差不多，如果你想把你想把你电脑上的东西放到设备中去，执行push吧，反之执行pull吧。干巴巴的说没意思，我们在终端上玩一把<br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2tv1tgzwbj318s0aego9.jpg" alt=""><br>我们对Desktop进行ls，上面有一个API_KEY.txt文件，我们打算把它推送到我们的真机上面，下面来看看<br><img src="http://ww1.sinaimg.cn/mw690/005yqym4gw1f2tv3gryshj318y02sdgo.jpg" alt=""><br>我们来看看手机里面有吗<br><img src="http://ww4.sinaimg.cn/mw690/005yqym4gw1f2tv5cxs86j318s02oq3i.jpg" alt=""><br>发现已经成功的推到我们的设备了，反之我们怎么办，把API_KEY.txt拿到我们的电脑上面，首先我们把电脑上的rm掉<br><code>rm API_KEY.txt</code><br>然后<br><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f2tv6itt1fj318w02egme.jpg" alt=""><br>此时已经成功放到我们的桌面了。</p><p>下一篇会和大家一起来看看adb logcat的用法</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我们开始学习adb了！！！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Android开发中从Eclipse到现在的AndroidStudio，ADB起了主导作用，但是我们真正用命令来操控adb的时候并不多，开始windows上面的adb，经常被别人占用端口，现在换了Mac，这些困扰的问题也少了很多。&lt;br&gt;今天就和大家一起来学习学习adb的使用，开篇比较简单。adb在sdk中的platform-tools下，我们要把他配置到环境变量下，基于Mac。可以看我之前的一篇&lt;a href=&quot;http://blog.csdn.net/dakaring/article/details/48295515&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;快速配置adb&lt;/a&gt;这里就不说了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adb version&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;显示&lt;br&gt;&lt;code&gt;Android Debug Bridge version 1.0.35
Revision 102d0d1e73de-android&lt;/code&gt;&lt;br&gt;这是我的adb版本，我们能看出来，adb的全称Android Debug Bridge。&lt;/p&gt;
&lt;p&gt;我们在使用任何命令之前记得敲他的help肯定没有错，我们输入&lt;br&gt;&lt;code&gt;adb help&lt;/code&gt;&lt;br&gt;这里只贴出一部分&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005yqym4gw1f2tr3meonxj30p10lote8.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;如果你对英文技术文档很敏感，完全可以自己明白这些命令的意思，无非就是adb后面加上他呗。下面我们捡几个重要的一起来看一下。&lt;br&gt;我们一起来看一下，如果我们想知道我们的电脑上有几个设备，输入&lt;br&gt;&lt;code&gt;adb devices&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005yqym4gw1f2tuy7z0j8j318y0500ts.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我这里有两个，一个是模拟器，一个是真机，那么我们如果要想针对某一个机器进行操作，我们输入&lt;br&gt;&lt;code&gt;adb shell&lt;/code&gt;&lt;br&gt;但是给我们的却不是我们想要的，&lt;br&gt;&lt;code&gt;error: more than one device/emulator&lt;/code&gt;&lt;br&gt;这并没有什么问题，因为你执行这么一句，机器并不知道你是要操作真机还是模拟器，所以我们要把他的序列码加上就好了。指定设备进行操作。&lt;br&gt;help中有这么一行命令&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/005yqym4gw1f2ts7f77fkj30mj019q30.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;然后我门这样来搞，&lt;br&gt;&lt;code&gt;adb -s 4e934820 shell&lt;/code&gt;&lt;br&gt;这里我们对我们的真机进行操作，回车这里已经成功进入到我们的真机，输入ls，查看真机的所有目录&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/005yqym4gw1f2tuzcjzkmj318y0rqn2m.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;输入exit退出。还有一种方法感觉高大上，还是回顾我们的help命令有这么两行，可以简单帮我们搞定&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2ts857ayhj30mm03awf0.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;-d 也就是我们的USBDevice&lt;br&gt;-e 也就是我们的emulator。&lt;br&gt;上面输入序列码的操作可以简单成&lt;br&gt;&lt;code&gt;adb -d shell&lt;/code&gt;|| &lt;code&gt;adb -e shell&lt;/code&gt;&lt;br&gt;直接对真机或者模拟器进行操作。&lt;br&gt;我们已经成功打入到我们的设备内部，那如果我们想从设备中拿我们需要的东西怎么办，或者把我们电脑上的东西放到我们的设备中去怎么办&lt;br&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/005yqym4gw1f2ts8edkccj30kf03zwf2.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;help中有这么两个命令，是不是很熟悉，和我们在git中使用的场景含义差不多，如果你想把你想把你电脑上的东西放到设备中去，执行push吧，反之执行pull吧。干巴巴的说没意思，我们在终端上玩一把&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2tv1tgzwbj318s0aego9.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们对Desktop进行ls，上面有一个API_KEY.txt文件，我们打算把它推送到我们的真机上面，下面来看看&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/mw690/005yqym4gw1f2tv3gryshj318y02sdgo.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们来看看手机里面有吗&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/005yqym4gw1f2tv5cxs86j318s02oq3i.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;发现已经成功的推到我们的设备了，反之我们怎么办，把API_KEY.txt拿到我们的电脑上面，首先我们把电脑上的rm掉&lt;br&gt;&lt;code&gt;rm API_KEY.txt&lt;/code&gt;&lt;br&gt;然后&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/005yqym4gw1f2tv6itt1fj318w02egme.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;此时已经成功放到我们的桌面了。&lt;/p&gt;
&lt;p&gt;下一篇会和大家一起来看看adb logcat的用法&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="Android奇技淫巧" scheme="http://0x002.top/tags/Android%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
      <category term="adb" scheme="http://0x002.top/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>SublimeText查看Android源码配置</title>
    <link href="http://0x002.top/2016/03/17/SublimeText-AndroidSourceConfig/"/>
    <id>http://0x002.top/2016/03/17/SublimeText-AndroidSourceConfig/</id>
    <published>2016-03-17T05:21:10.000Z</published>
    <updated>2018-05-30T12:40:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在Windows上面是用Source Insight查看源码，换做Mac开发之后发现SublimeText(下面简称ST)也很棒，之前一直在简单的用，还有一些奇技淫巧没发现，最近想好好的用下他，才把他通通的配置了一番。记录记录，有技巧，有填坑。</p><a id="more"></a><p> 首先你要下载ST，还有Android源码。才能接着往下走。</p><h3><span id="安装package-control插件">安装Package Control插件</span></h3><p>首先打开控制台：view-&gt;showConsole<br>然后输入以下代码，回车</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())</span><br></pre></td></tr></table></figure><p>等一会，重启ST，然后到Preferences里面看一下是否有Package Control，有你就成功了。</p><h3><span id="安装ctags">安装CTags</span></h3><p>打开你刚刚安装的Package Control，接着输入install package，回车，然后输入ctag，出现的话就是你没安装过，没有的话你已经安装过。可以到Preference -&gt; Browse Packages里面查看你安装过的插件。<br>直接Open你的文件，这时你在打开的文件中，右键菜单中会多一个Navigate to Definition菜单项，在侧左栏的工程/项目文件上右键会看到CTags: Rebuild Tags菜单项，这种种迹象表明你已经安装成功，只是安装成功，能不能使用，再说。</p><h3><span id="使用ctags">使用Ctags</span></h3><p>如果你右键看到CTags: Rebuild Tags菜单项，并点击它，下面会出现.tags文件，则已经成功，可以直接跳到下一步。如果没有的话，你要检查一下你Open的文件路径是不是中文路径，或者根据情况来定位。</p><h3><span id="ctags配置">Ctags配置</span></h3><p>一切Ctags默认的属性设置都在Preference -&gt;PackageSetting-&gt;Ctags下面。我们需要做的是首先将Setting default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径/usr/local/bin/ctags。默认的点击方法跳转的快捷键是ctrl+shift+鼠标左键，我们可以将其修改了，我们把Mouse Binding default中的配置全部复制到user中，然后修改modifiers中的属性，将其全部改为command，这样就OK了。</p><h3><span id="一些快捷键">一些快捷键</span></h3><p>Command+P：查找文件<br>Command+R：查找方法<br>Command+左键：文件或函数跳转<br>Command+右键：返回文件或函数跳转的原始位置</p><h3><span id="另外推荐几个st的插件">另外推荐几个ST的插件</span></h3><p>我们在使用AS的时候，格式化代码是一件很爽的事情，command+alt+L，格式化代码，但是在ST上面一个插件也可以实现Alignment，安装方法同上，快捷键是ctrl+shift+A。所有的插件都是通过install  package进行查找安装的。</p><p>推荐：<br><a href="https://www.zhihu.com/question/24896283" target="_blank" rel="noopener">Sublime Text 有哪些使用技巧？</a><br><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在Windows上面是用Source Insight查看源码，换做Mac开发之后发现SublimeText(下面简称ST)也很棒，之前一直在简单的用，还有一些奇技淫巧没发现，最近想好好的用下他，才把他通通的配置了一番。记录记录，有技巧，有填坑。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt; 首先你要下载ST，还有Android源码。才能接着往下走。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;安装package-control插件&quot;&gt;安装Package Control插件&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;首先打开控制台：view-&amp;gt;showConsole&lt;br&gt;然后输入以下代码，回车&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等一会，重启ST，然后到Preferences里面看一下是否有Package Control，有你就成功了。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;安装ctags&quot;&gt;安装CTags&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;打开你刚刚安装的Package Control，接着输入install package，回车，然后输入ctag，出现的话就是你没安装过，没有的话你已经安装过。可以到Preference -&amp;gt; Browse Packages里面查看你安装过的插件。&lt;br&gt;直接Open你的文件，这时你在打开的文件中，右键菜单中会多一个Navigate to Definition菜单项，在侧左栏的工程/项目文件上右键会看到CTags: Rebuild Tags菜单项，这种种迹象表明你已经安装成功，只是安装成功，能不能使用，再说。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;使用ctags&quot;&gt;使用Ctags&lt;/span&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="工具" scheme="http://0x002.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Android奇技淫巧" scheme="http://0x002.top/tags/Android%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>EventBus的一些记录</title>
    <link href="http://0x002.top/2016/03/15/ThinkInEventBus/"/>
    <id>http://0x002.top/2016/03/15/ThinkInEventBus/</id>
    <published>2016-03-15T11:04:53.000Z</published>
    <updated>2018-05-30T12:40:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前项目中用到过EventBus，之前只是单纯的用，最近在项目中再一次拿出来，就记录一下吧，当复习了。看下面的GIF，大致的表达了EventBus的工作形式。</p><p><img src="http://ww1.sinaimg.cn/large/005yqym4gw1f1zujk8yshg30b40jg41p.gif" alt=""></p><a id="more"></a><h3><span id="简介">简介</span></h3><p>借Github上面一张图来看一下EventBus是怎么工作的吧，</p><p><img src="https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png" alt=""></p><p>Eventbus是一个事件优化管理平台，可以将它想像成Android BroadCast&amp;BroadcastReceiver的轻量版，以事件驱动的方式来简化事件处理逻辑，平时开发是以callback或handler来达到类似效果。如果物件之间传递经过太多其他物件；或是一个信息经过太多物件，EventBus将会是一个不错的选择。优点是开销小，代码更优雅。以及将发送者和接收者解耦。</p><h3><span id="使用场景">使用场景</span></h3><p>我们试想一个简单的场景，在Profile页面，我们想修改我们的个人资料，进入到修改资料页面，修改成功返回到Profile页面，我们要将修改成功的资料显示到当前页面，一种是在Profile页面onResume方法中重新进行一次网络请求，另一种就是用事件传递，我们今天讲的，是第一种用户体验好，还是第二种体验好，可想而知，这只是一个简单的使用场景，我们还可以跨页面进行事件传递等等更深奥的用法。</p><h3><span id="如何使用">如何使用</span></h3><h4><span id="1-gradle中-compile-39orggreenroboteventbus30039">1. gradle中 <code>compile &#39;org.greenrobot:eventbus:3.0.0&#39;</code></span></h4><h4><span id="2-定义自己的事件">2. 定义自己的事件</span></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhateverEvent</span> &amp;#123</span>; </span><br><span class="line"><span class="comment">/*事件可任意String, int, Object...*/</span> </span><br><span class="line">    <span class="keyword">private</span> String message</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WhateverEvent</span><span class="params">(String message)</span>&amp;#123</span>;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &amp;#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span>&amp;#123</span>;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><h4><span id="3-注册反注册eventbus">3. 注册，反注册EventBus</span></h4><p>getDefault()为EventBus中的单例模式<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EventBus <span class="title">getDefault</span><span class="params">()</span> &amp;#123</span>;</span><br><span class="line">        if (defaultInstance == null) &amp;#123;</span><br><span class="line">            synchronized (EventBus.class) &amp;#123;</span><br><span class="line">                if (defaultInstance == null) &amp;#123;</span><br><span class="line">                    defaultInstance = <span class="keyword">new</span> EventBus();</span><br><span class="line">                &amp;#125;</span><br><span class="line">            &amp;#125;</span><br><span class="line">        &amp;#125;</span><br><span class="line">        <span class="keyword">return</span> defaultInstance;</span><br><span class="line">    &amp;#125;</span><br></pre></td></tr></table></figure></p><p>也可以建立自定义的EventBus。<br>注册,反注册的代码是这样的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> &amp;#123</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    &amp;#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &amp;#125;</span><br><span class="line">   ...</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure></p><p>记得写unregister()，不然会内存泄露（memory leak）。</p><h4><span id="4订阅事件接收消息">4.订阅事件（接收消息）</span></h4><p>共有四个函数，各功能不同，这里先写其中的一个。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> &amp;#123</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(WhateverEvent event)</span> &amp;#123</span>;</span><br><span class="line">        <span class="comment">/*处理事件*/</span></span><br><span class="line">        Log.i(<span class="string">"TAG"</span>, event.getMessage());</span><br><span class="line">    &amp;#125;;</span><br><span class="line">    ...</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure></p><p>onEvent() 的paremeter为订阅的事件，也就我们的第二步中我们写的。</p><h4><span id="5传送事件发送消息">5.传送事件（发送消息）</span></h4><p>这个就很简单了<code>eventBus.post(new AnyEventType event);</code><br>大致的介绍了一遍，不知道你们晕了吗，那么上面的GIF图用代码实现，应该就很简单了吧。就是两个Activity，每一个Activity里面又一个Button，然后进行事件的传递。由于我们是在第一个页面点击按钮进入到第二个页面，那么我们在第一个页面注册以及反注册，然后在第二个页面post消息就好了。完整的代码奉上</p><h4><span id="mainactivity">MainActivity：</span></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> &amp;#123</span>;</span><br><span class="line">    TextView tv_event_info;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//注册eventbus</span></span><br><span class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">        tv_event_info = (TextView) findViewById(R.id.text);</span><br><span class="line">    &amp;#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startTo</span><span class="params">(View v)</span> &amp;#123</span>;</span><br><span class="line">        startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class));</span><br><span class="line">    &amp;#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">//反注册EventBus</span></span><br><span class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &amp;#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(EventInfo event)</span> &amp;#123</span>;</span><br><span class="line">        String msg = <span class="string">"onEventMainThread收到了消息："</span> + event.getInfo();</span><br><span class="line">        tv_event_info.setText(msg);</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, msg, Toast.LENGTH_LONG).show();</span><br><span class="line">    &amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><h4><span id="secondactivity">SecondActivity：</span></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> &amp;#123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line">    &amp;#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoFirst</span><span class="params">(View v)</span> &amp;#123</span>;</span><br><span class="line">        EventBus.getDefault().post(<span class="keyword">new</span> EventInfo(<span class="string">"这是EventBus给你的"</span>));</span><br><span class="line">        finish();</span><br><span class="line">    &amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><h4><span id="eventinfo">EventInfo:</span></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventInfo</span> &amp;#123</span>;</span><br><span class="line">    <span class="keyword">private</span> String mInfo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventInfo</span><span class="params">(String info)</span> &amp;#123</span>;</span><br><span class="line">        mInfo = info;</span><br><span class="line">    &amp;#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">return</span> mInfo;</span><br><span class="line">    &amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>其中的onEvent()我写的是onEventMainThread(),这里onEvent()可替换成 onEventMainThread(), onEventBackgroundThread(), onEventAsync()来指定要在哪个Thread执行。<br>Sticky event﹔事件发送完成不会马上消失 ，任何注册sticky event的class可以马上收到最后一则sticky event。<br>如果你要进行代码混淆，记得在你的proguard.cfg中加入<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> -keepclassmembers <span class="class"><span class="keyword">class</span> ** &amp;#123</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> onEvent*(**);</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure></p><h3><span id="相关文章推荐">相关文章推荐：</span></h3><p><a href="http://blog.csdn.net/yuanzeyao/article/details/38174537" target="_blank" rel="noopener">Android解耦库EventBus的使用和源码分析</a><br>EventBus老家<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">Github</a><br>最近EventBus3更新了，来看看<a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653576922&amp;idx=2&amp;sn=54ff6079ea410d9b551cbde2c8fd3ae4&amp;scene=4#wechat_redirect" target="_blank" rel="noopener">腾讯的老司机是怎么飙EventBus3的吧</a></p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前项目中用到过EventBus，之前只是单纯的用，最近在项目中再一次拿出来，就记录一下吧，当复习了。看下面的GIF，大致的表达了EventBus的工作形式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/005yqym4gw1f1zujk8yshg30b40jg41p.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3&gt;&lt;span id=&quot;简介&quot;&gt;简介&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;借Github上面一张图来看一下EventBus是怎么工作的吧，&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/greenrobot/EventBus/raw/master/EventBus-Publish-Subscribe.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Eventbus是一个事件优化管理平台，可以将它想像成Android BroadCast&amp;amp;BroadcastReceiver的轻量版，以事件驱动的方式来简化事件处理逻辑，平时开发是以callback或handler来达到类似效果。如果物件之间传递经过太多其他物件；或是一个信息经过太多物件，EventBus将会是一个不错的选择。优点是开销小，代码更优雅。以及将发送者和接收者解耦。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;使用场景&quot;&gt;使用场景&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;我们试想一个简单的场景，在Profile页面，我们想修改我们的个人资料，进入到修改资料页面，修改成功返回到Profile页面，我们要将修改成功的资料显示到当前页面，一种是在Profile页面onResume方法中重新进行一次网络请求，另一种就是用事件传递，我们今天讲的，是第一种用户体验好，还是第二种体验好，可想而知，这只是一个简单的使用场景，我们还可以跨页面进行事件传递等等更深奥的用法。&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;如何使用&quot;&gt;如何使用&lt;/span&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="实战小技巧" scheme="http://0x002.top/tags/%E5%AE%9E%E6%88%98%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Android中Notification的PendingIntent无效问题解决</title>
    <link href="http://0x002.top/2016/03/11/ThinkInPendingIntent/"/>
    <id>http://0x002.top/2016/03/11/ThinkInPendingIntent/</id>
    <published>2016-03-11T15:04:26.000Z</published>
    <updated>2018-05-30T12:40:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面来一段代码，引出今天的梗</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">NotificationManager nm = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(context, MainActivity.class);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">intent.putExtra(<span class="string">"aa"</span>,<span class="string">"bb"</span>);</span><br><span class="line">PendingIntent mPendingIntent = PendingIntent.getActivity(context, <span class="number">0</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">Notification mNotification;</span><br><span class="line">if (android.os.Build.VERSION.SDK_INT &lt; 16) &amp;#123;</span><br><span class="line">   mNotification = <span class="keyword">new</span> Notification();</span><br><span class="line">   mNotification.icon = R.drawable.ic_launcher;<span class="comment">// icon 的id</span></span><br><span class="line">   mNotification.defaults = Notification.DEFAULT_ALL;</span><br><span class="line">   mNotification.flags = Notification.FLAG_AUTO_CANCEL;</span><br><span class="line">&amp;#125; else &amp;#123;</span><br><span class="line"> mNotification = <span class="keyword">new</span> Notification.Builder(context)</span><br><span class="line">  .setContentTitle(title).setContentText(message)</span><br><span class="line">  .setSmallIcon(R.drawable.ic_launcher)</span><br><span class="line">  .setDefaults(Notification.DEFAULT_ALL)</span><br><span class="line">  .setAutoCancel(<span class="keyword">true</span>).setContentIntent(mPendingIntent).build();</span><br><span class="line">&amp;#125;</span><br><span class="line">nm.notify(<span class="number">0</span>, mNotification);</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的代码就是最基本的消息通知，然后启动相应的界面，现在世面上大多数也都是这么写的，但是最近却栽在这个坑上了，为啥这么说，因为当我们消息推送的时候在其他机型这样写都是OK的，唯独在华为上面，点击消息启动栏没有任何反应，也不闪退，也不给我们答案，就是通知状态没有了。纠结了一阵子，今天终于。。。。<br>我们先来看一下，作用于此事件的幕后黑手究竟是谁，上面的代码一目了然，PendingIntent.getActivity(Context context, int requestCode, Intent intent, int flags)，nm.notify(0, mNotification);就是这两个方法在搞怪，我们来看看里面的参数，<a href="http://developer.android.com/intl/zh-cn/reference/android/app/PendingIntent.html#getActivities(android.content.Context, int, android.content.Intent[], int" target="_blank" rel="noopener">PendingIntent.getActivity</a>)官方的解释是这样的</p><blockquote><p>Retrieve a PendingIntent that will start a new activity, like calling Context.startActivity(Intent). Note that the activity will be started outside of the context of an existing activity, so you must use the Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.</p></blockquote><p>主要的意思就是使用PendingIntent来启动一个Activity，就像用Context.startActivity(Intent)来启动一个Activity一样，注意这里的activity将是上下文之外现有的activity，所以你必须使用Intent.FLAG_ACTIVITY_NEW_TASK标记位来启动一个intent。</p><p>这里面的第一个，第三个参数这里不打算细说了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* <span class="meta">@param</span> context The Context in which <span class="keyword">this</span> PendingIntent should start</span><br><span class="line">* the activity.</span><br><span class="line">* <span class="meta">@param</span> requestCode Private request code <span class="keyword">for</span> the sender</span><br><span class="line">* <span class="meta">@param</span> intent Intent of the activity to be launched.</span><br><span class="line">* @param flags May be &amp;#123;@link #FLAG_ONE_SHOT&amp;#125;, &amp;#123;@link #FLAG_NO_CREATE&amp;#125;,</span><br><span class="line">* &amp;#123;@link #FLAG_CANCEL_CURRENT&amp;#125;, &amp;#123;@link #FLAG_UPDATE_CURRENT&amp;#125;,</span><br><span class="line">* or any of the flags as supported by</span><br><span class="line">* &amp;#123;@link Intent#fillIn Intent.fillIn()&amp;#125; to control which unspecified parts</span><br><span class="line">* of the intent that can be supplied when the actual send happens.</span><br></pre></td></tr></table></figure><p>摘自源码，当我们点进去getActivity方法时是这样的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getActivity</span><span class="params">(Context context, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            Intent intent, @Flags <span class="keyword">int</span> flags)</span> &amp;#123</span>;</span><br><span class="line">        <span class="keyword">return</span> getActivity(context, requestCode, intent, flags, <span class="keyword">null</span>);</span><br><span class="line">    &amp;#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PendingIntent <span class="title">getActivity</span><span class="params">(Context context, <span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NonNull Intent intent, @Flags <span class="keyword">int</span> flags, @Nullable Bundle options)</span> &amp;#123</span>;</span><br><span class="line">        String packageName = context.getPackageName();</span><br><span class="line">        String resolvedType = intent != <span class="keyword">null</span> ? intent.resolveTypeIfNeeded(</span><br><span class="line">                context.getContentResolver()) : <span class="keyword">null</span>;</span><br><span class="line">        try &amp;#123;</span><br><span class="line">            intent.migrateExtraStreamToClipData();</span><br><span class="line">            intent.prepareToLeaveProcess();</span><br><span class="line">            IIntentSender target =</span><br><span class="line">                ActivityManagerNative.getDefault().getIntentSender(</span><br><span class="line">                    ActivityManager.INTENT_SENDER_ACTIVITY, packageName,</span><br><span class="line">                    null, null, requestCode, new Intent[] &amp;#123; intent &amp;#125;,</span><br><span class="line">                    resolvedType != null ? new String[] &amp;#123; resolvedType &amp;#125; : null,</span><br><span class="line">                    flags, options, UserHandle.myUserId());</span><br><span class="line">            <span class="keyword">return</span> target != <span class="keyword">null</span> ? <span class="keyword">new</span> PendingIntent(target) : <span class="keyword">null</span>;</span><br><span class="line">        &amp;#125; catch (RemoteException e) &amp;#123;</span><br><span class="line">        &amp;#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &amp;#125;</span><br></pre></td></tr></table></figure><p>第四个参数Flag我挨个换了一遍还是不行，排除法，最后剩下requestCode了，可是网上都是这么写的啊，不然，就是他的原因。我们可以从源码中可以看出来，我们把requestCode传进去之后，重新传给了IIntentSender对象，看源码涉及到IPC机制，贴出getIntentSender()源码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IIntentSender <span class="title">getIntentSender</span><span class="params">(<span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="function"><span class="params">           String packageName, IBinder token, String resultWho,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> requestCode, Intent[] intents, String[] resolvedTypes, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">           Bundle options, <span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> RemoteException &amp;#123</span>;</span><br><span class="line">       Parcel data = Parcel.obtain();</span><br><span class="line">       Parcel reply = Parcel.obtain();</span><br><span class="line">       data.writeInterfaceToken(IActivityManager.descriptor);</span><br><span class="line">       data.writeInt(type);</span><br><span class="line">       data.writeString(packageName);</span><br><span class="line">       data.writeStrongBinder(token);</span><br><span class="line">       data.writeString(resultWho);</span><br><span class="line">       data.writeInt(requestCode);</span><br><span class="line">       if (intents != null) &amp;#123;</span><br><span class="line">           data.writeInt(<span class="number">1</span>);</span><br><span class="line">           data.writeTypedArray(intents, <span class="number">0</span>);</span><br><span class="line">           data.writeStringArray(resolvedTypes);</span><br><span class="line">       &amp;#125; else &amp;#123;</span><br><span class="line">           data.writeInt(<span class="number">0</span>);</span><br><span class="line">       &amp;#125;</span><br><span class="line">       data.writeInt(flags);</span><br><span class="line">       if (options != null) &amp;#123;</span><br><span class="line">           data.writeInt(<span class="number">1</span>);</span><br><span class="line">           options.writeToParcel(data, <span class="number">0</span>);</span><br><span class="line">       &amp;#125; else &amp;#123;</span><br><span class="line">           data.writeInt(<span class="number">0</span>);</span><br><span class="line">       &amp;#125;</span><br><span class="line">       data.writeInt(userId);</span><br><span class="line">       mRemote.transact(GET_INTENT_SENDER_TRANSACTION, data, reply, <span class="number">0</span>);</span><br><span class="line">       reply.readException();</span><br><span class="line">       IIntentSender res = IIntentSender.Stub.asInterface(</span><br><span class="line">               reply.readStrongBinder());</span><br><span class="line">       data.recycle();</span><br><span class="line">       reply.recycle();</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &amp;#125;</span><br></pre></td></tr></table></figure><p>这里首先获取Parcel对象，Parcel.obtain(),然后将我们传递过来的参数打包到Parcel对象中，parcel.write(),最后将我们打包好的数据发送出去 mRemote.transact(),最后回收parcel对象，data.recycle();reply.recycle();<br>猜测应该是sender用requestCode来区分不同的PendingIntent对象，然后对应。因为之前我们传递的都是0，所以这里我们将requestCode的值改为每条消息都不一样就好了。这里也要记住，getActivity中requestCode和notiy中的id要保持一致，我将这里改成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PendingIntent mPendingIntent = PendingIntent.getActivity(context, (<span class="keyword">int</span>)System.currentTimeMillis()/<span class="number">1000</span>, intent, PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">nm.notify((<span class="keyword">int</span>) (System.currentTimeMillis()/<span class="number">1000</span>), mNotification);</span><br></pre></td></tr></table></figure><p>这样就解决问题了。</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面来一段代码，引出今天的梗&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NotificationManager nm = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.setClass(context, MainActivity.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;intent.putExtra(&lt;span class=&quot;string&quot;&gt;&quot;aa&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;bb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PendingIntent mPendingIntent = PendingIntent.getActivity(context, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, intent, PendingIntent.FLAG_UPDATE_CURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Notification mNotification;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (android.os.Build.VERSION.SDK_INT &amp;lt; 16) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mNotification = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Notification();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mNotification.icon = R.drawable.ic_launcher;&lt;span class=&quot;comment&quot;&gt;// icon 的id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mNotification.defaults = Notification.DEFAULT_ALL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   mNotification.flags = Notification.FLAG_AUTO_CANCEL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;#125; else &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	mNotification = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Notification.Builder(context)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setContentTitle(title).setContentText(message)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setSmallIcon(R.drawable.ic_launcher)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setDefaults(Notification.DEFAULT_ALL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .setAutoCancel(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;).setContentIntent(mPendingIntent).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nm.notify(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, mNotification);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;上面的代码就是最基本的消息通知，然后启动相应的界面，现在世面上大多数也都是这么写的，但是最近却栽在这个坑上了，为啥这么说，因为当我们消息推送的时候在其他机型这样写都是OK的，唯独在华为上面，点击消息启动栏没有任何反应，也不闪退，也不给我们答案，就是通知状态没有了。纠结了一阵子，今天终于。。。。&lt;br&gt;我们先来看一下，作用于此事件的幕后黑手究竟是谁，上面的代码一目了然，PendingIntent.getActivity(Context context, int requestCode, Intent intent, int flags)，nm.notify(0, mNotification);就是这两个方法在搞怪，我们来看看里面的参数，&lt;a href=&quot;http://developer.android.com/intl/zh-cn/reference/android/app/PendingIntent.html#getActivities(android.content.Context, int, android.content.Intent[], int&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PendingIntent.getActivity&lt;/a&gt;)官方的解释是这样的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrieve a PendingIntent that will start a new activity, like calling Context.startActivity(Intent). Note that the activity will be started outside of the context of an existing activity, so you must use the Intent.FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要的意思就是使用PendingIntent来启动一个Activity，就像用Context.startActivity(Intent)来启动一个Activity一样，注意这里的activity将是上下文之外现有的activity，所以你必须使用Intent.FLAG_ACTIVITY_NEW_TASK标记位来启动一个intent。&lt;/p&gt;
&lt;p&gt;这里面的第一个，第三个参数这里不打算细说了。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;* &lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt; context The Context in which &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; PendingIntent should start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* the activity.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt; requestCode Private request code &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &lt;span class=&quot;meta&quot;&gt;@param&lt;/span&gt; intent Intent of the activity to be launched.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param flags May be &amp;amp;#123;@link #FLAG_ONE_SHOT&amp;amp;#125;, &amp;amp;#123;@link #FLAG_NO_CREATE&amp;amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;amp;#123;@link #FLAG_CANCEL_CURRENT&amp;amp;#125;, &amp;amp;#123;@link #FLAG_UPDATE_CURRENT&amp;amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* or any of the flags as supported by&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* &amp;amp;#123;@link Intent#fillIn Intent.fillIn()&amp;amp;#125; to control which unspecified parts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* of the intent that can be supplied when the actual send happens.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;摘自源码，当我们点进去getActivity方法时是这样的&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; PendingIntent &lt;span class=&quot;title&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; requestCode,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;            Intent intent, @Flags &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags)&lt;/span&gt; &amp;amp;#123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getActivity(context, requestCode, intent, flags, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; PendingIntent &lt;span class=&quot;title&quot;&gt;getActivity&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; requestCode,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;            @NonNull Intent intent, @Flags &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags, @Nullable Bundle options)&lt;/span&gt; &amp;amp;#123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String packageName = context.getPackageName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String resolvedType = intent != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? intent.resolveTypeIfNeeded(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                context.getContentResolver()) : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.migrateExtraStreamToClipData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            intent.prepareToLeaveProcess();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            IIntentSender target =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ActivityManagerNative.getDefault().getIntentSender(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ActivityManager.INTENT_SENDER_ACTIVITY, packageName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    null, null, requestCode, new Intent[] &amp;amp;#123; intent &amp;amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    resolvedType != null ? new String[] &amp;amp;#123; resolvedType &amp;amp;#125; : null,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    flags, options, UserHandle.myUserId());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; target != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; ? &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; PendingIntent(target) : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;#125; catch (RemoteException e) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="埋坑" scheme="http://0x002.top/tags/%E5%9F%8B%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>ScrollView中嵌套滚动控件手势解决</title>
    <link href="http://0x002.top/2016/03/08/ScollGesturesConflictSolve/"/>
    <id>http://0x002.top/2016/03/08/ScollGesturesConflictSolve/</id>
    <published>2016-03-08T10:39:40.000Z</published>
    <updated>2018-05-30T12:39:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天做项目时遇到这么一个场景，在一个ScrollView中需要有一个时间选择控件，就是仿的iOS时间选择那种，布局实现很简单很快实现，可是就是在玩的时候，轮子滚动和外层的ScrollView滚动起了一点摩擦。<br>一上来就想到的是事件冲突了。最终有这么一个简单的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listView.setOnTouchListener(new View.OnTouchListener() &amp;#123;</span><br><span class="line">           @Override</span><br><span class="line">           public boolean onTouch(View v, MotionEvent event) &amp;#123;</span><br><span class="line">               if (event.getAction() == MotionEvent.ACTION_UP) &amp;#123;</span><br><span class="line">                   mSrollView.requestDisallowInterceptTouchEvent(false);</span><br><span class="line">               &amp;#125; else &amp;#123;</span><br><span class="line">                   mSrollView.requestDisallowInterceptTouchEvent(true);</span><br><span class="line">               &amp;#125;</span><br><span class="line">               return false;</span><br><span class="line">           &amp;#125;</span><br><span class="line">       &amp;#125;);</span><br></pre></td></tr></table></figure><p>mSrollView.requestDisallowInterceptTouchEvent()这句话的意思就是告诉父view不要拦截此事件，哥自己来处理就好。<br>对listview，scrollView，recycleView都适用。</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做项目时遇到这么一个场景，在一个ScrollView中需要有一个时间选择控件，就是仿的iOS时间选择那种，布局实现很简单很快实现，可是就是在玩的时候，轮子滚动和外层的ScrollView滚动起了一点摩擦。&lt;br&gt;一上来就想到的是事件冲突了。最终有这么一个简单的方法。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;listView.setOnTouchListener(new View.OnTouchListener() &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public boolean onTouch(View v, MotionEvent event) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               if (event.getAction() == MotionEvent.ACTION_UP) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   mSrollView.requestDisallowInterceptTouchEvent(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;amp;#125; else &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   mSrollView.requestDisallowInterceptTouchEvent(true);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;mSrollView.requestDisallowInterceptTouchEvent()这句话的意思就是告诉父view不要拦截此事件，哥自己来处理就好。&lt;br&gt;对listview，scrollView，recycleView都适用。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="Android事件处理" scheme="http://0x002.top/tags/Android%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>面试时候一些问题回答</title>
    <link href="http://0x002.top/2016/03/06/Android-zhihu-question/"/>
    <id>http://0x002.top/2016/03/06/Android-zhihu-question/</id>
    <published>2016-03-06T11:32:36.000Z</published>
    <updated>2018-05-30T12:35:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经就职阿里巴巴－菜鸟的Android工程师<a href="http://litesuits.com/" target="_blank" rel="noopener">马天宇</a>，一个月面试了杭州10几家有名的互联网公司，一次分享，我帮忙整理了一下，整理到了知乎上面，一些架构师才会考虑的面试题，有一些深度，帮大家扩展知识面，但是下面给出的经典答案，大家可以点击查看。都是用心在回答的，很赞。</p><ol><li>整体性能如何探测，有哪方面 什么指标，怎么保证更流畅</li><li>讲讲架构这块，如何解耦，大项目逻辑多怎么办。</li><li>android的发展大事件和主要技术发展</li><li>avtivity（service）启动流程简述</li><li>动态化的几种方案</li><li>热修复的原理</li><li>网络这块怎么优化</li><li>数据库性能怎么保证</li><li>线程安全怎么保证，异步并发这块你怎么做的</li></ol><p><a href="https://www.zhihu.com/question/40909636" target="_blank" rel="noopener">原文链接</a></p><p>知乎欢迎关注😊</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在已经就职阿里巴巴－菜鸟的Android工程师&lt;a href=&quot;http://litesuits.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;马天宇&lt;/a&gt;，一个月面试了杭州10几家有名的互联网公司，一次分享，我帮忙整理了一下，整理到了知乎上面，一些架构师才会考虑的面试题，有一些深度，帮大家扩展知识面，但是下面给出的经典答案，大家可以点击查看。都是用心在回答的，很赞。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整体性能如何探测，有哪方面 什么指标，怎么保证更流畅&lt;/li&gt;
&lt;li&gt;讲讲架构这块，如何解耦，大项目逻辑多怎么办。&lt;/li&gt;
&lt;li&gt;android的发展大事件和主要技术发展&lt;/li&gt;
&lt;li&gt;avtivity（service）启动流程简述&lt;/li&gt;
&lt;li&gt;动态化的几种方案&lt;/li&gt;
&lt;li&gt;热修复的原理&lt;/li&gt;
&lt;li&gt;网络这块怎么优化&lt;/li&gt;
&lt;li&gt;数据库性能怎么保证&lt;/li&gt;
&lt;li&gt;线程安全怎么保证，异步并发这块你怎么做的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/40909636&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;知乎欢迎关注😊&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="面试回答" scheme="http://0x002.top/tags/%E9%9D%A2%E8%AF%95%E5%9B%9E%E7%AD%94/"/>
    
  </entry>
  
  <entry>
    <title>AndroidSupportLibrary23.2重磅更新</title>
    <link href="http://0x002.top/2016/02/25/AndroidSupportLibrary23-2/"/>
    <id>http://0x002.top/2016/02/25/AndroidSupportLibrary23-2/</id>
    <published>2016-02-25T02:02:03.000Z</published>
    <updated>2018-05-30T12:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>2月25凌晨Google正式发布了android-support-library-23.2支持库，一大早微信群里面都在热议不止，开发者们的福音。这一次23.2版本增加了一些新的支持库以及新的功能，许多现有的库，还把之前的library小学生问题修复了，可喜可贺。闲言碎语不要讲，直接切入正题。(文中链接记得自备梯子)</p><p>YouTube观看链接<a href="https://www.youtube.com/watch?v=7E2lNBM38IE&amp;list=PLWz5rJ2EKKc9e0d55YHgJFHXNZbGHEXJX&amp;index=1" target="_blank" rel="noopener">Android Support Library</a></p><p>原文<a href="http://android-developers.blogspot.jp/2016/02/android-support-library-232.html" target="_blank" rel="noopener">Android Developers Blog</a></p><a id="more"></a><h3><span id="中文翻译">中文翻译</span></h3><p>本次更新主要涉及：</p><ol><li>Support Vector Drawables and Animated Vector Drawables</li><li>AppCompat DayNight theme</li><li>Design Support Library: Bottom Sheets</li><li>Support v4: MediaBrowserServiceCompat</li><li>RecyclerView</li><li>Custom Tabs</li><li>Leanback for Android TV</li></ol><p><strong>1.Support Vector Drawables and Animated Vector Drawables(支持矢量图片和矢量图片动画)</strong></p><p><a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/VectorDrawable.html" target="_blank" rel="noopener">Vector Drawables</a>让你用一个矢量图片，替换定义在XML中的多个PNG资源。而此前只支持L版本或者更高的设备版本，通过support-vector-drawable和support-animated-vector-drawable两新的支持库分别支持矢量图片和矢量图片动画。<br>AndroidStudio1.4已经引入过矢量绘图支持在构建时生成PNG图像。要想禁用此功能(并想使用最新支持库)，你需要在你的build.gradle里面添加vectorDrawables.useSupportLibrary = true </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Gradle Plugin 2.0+  </span><br><span class="line"> android &amp;#123;  </span><br><span class="line">   defaultConfig &amp;#123;  </span><br><span class="line">     vectorDrawables.useSupportLibrary = true  </span><br><span class="line">    &amp;#125;  </span><br><span class="line"> &amp;#125;</span><br></pre></td></tr></table></figure><p>你会发现这个新的属性只在AndroidStudio2.0版本存在。如果您使用的是AndroidStudio1.5，需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// Gradle Plugin 1.5  </span><br><span class="line"> android &amp;#123;  </span><br><span class="line">   defaultConfig &amp;#123;  </span><br><span class="line">     generatedDensities = []  </span><br><span class="line">  &amp;#125;  </span><br><span class="line"></span><br><span class="line">  // This is handled for you by the 2.0+ Gradle Plugin  </span><br><span class="line">  aaptOptions &amp;#123;  </span><br><span class="line">    additionalParameters &quot;--no-version-vectors&quot;  </span><br><span class="line">  &amp;#125;  </span><br><span class="line"> &amp;#125;</span><br></pre></td></tr></table></figure><p>VectorDrawableCompat支持API7+，AnimatedVectorDrawableCompat支持API11+。<br>由于android的图片加载机制的限制，不是所有支持图片id的地方（例如xml文件里）都能使用矢量图。值得一体的是，AppCompat已经增加了许多功能，可以很容易地使用新的矢量绘图资源。<br>首先，当我们在ImageView(或子类，如ImageButton和FloatingActionButton)中使用Appcomat，你就可以使用新属性app:srcCompat来引用矢量图片（也可以在android:src中以及任何其他可用的地方使用图片)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImageView   </span><br><span class="line">  android:layout_width = &quot;wrap_content&quot;   </span><br><span class="line">  android:layout_height = &quot;wrap_content&quot;   </span><br><span class="line">  app:srcCompat = &quot;@drawable/ic_add&quot;  /&gt;</span><br></pre></td></tr></table></figure><p>如果你在运行时(java代码中)更改drawable，你也可以使用相同的setImageResource()和以前一样没有变。使用AppCompat和 app:srcCompat是将矢量图片集成到app的最简单的方法。<br>你会发现在L版本中不使用app:srcCompat引用矢量图都是无效的。然而，当矢量图被另一个drawable container(例如<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/StateListDrawable.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">StateListDrawable</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/InsetDrawable.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">InsetDrawable</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/LayerDrawable.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">LayerDrawable</a>，<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/LevelListDrawable.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">LevelListDrawable</a>和<a href="http://developer.android.com/intl/zh-cn/reference/android/graphics/drawable/RotateDrawable.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">RotateDrawable</a> )引用时，AppCompat是可以加载的。所以，在一些无法直接使用AppCompat（直接使用app:srcCompat）的地方通过这种间接使用，也可以在矢量图片中使用类似 TextView’s android:drawableLeft属性。</p><p><strong>2.AppCompat DayNight theme(DayNight 主题)</strong></p><p><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f1cj0qlz3aj30ot0l7gnj.jpg" alt=""></p><p>此前API14，该DayNight主题以及DayNight.NoActionBar， DayNight.DarkActionBar，DayNight.Dialog等等，提供了相同的亮度。但在API 14和更高版本的设备，这个主题可以让应用程序可以轻松地支持 白天和夜晚的主题，根据是否是“夜晚”来决定主题是否从白天切换到夜晚主题。<br>默认情况下，是否是“夜晚”是由系统值(<a href="http://developer.android.com/intl/zh-cn/reference/android/app/UiModeManager.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog#getNightMode(" target="_blank" rel="noopener">UiModeManager.getNightMode()</a>)决定，但你可以重写该方法<a href="http://developer.android.com/intl/zh-cn/reference/android/support/v7/app/AppCompatDelegate.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">AppCompatDelegate</a>中的值来设置。你将能够在整个应用程序中设置默认值（直到进程重新启动）与静态AppCompatDelegate.setDefaultNightMode()或通过 <a href="http://developer.android.com/intl/zh-cn/reference/android/support/v7/app/AppCompatActivity.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog#getDelegate(" target="_blank" rel="noopener">getDelegate()</a>) 得到AppCompatDelegate对象，并使用setLocalNightMode()来设置当前的Activity或Dialog的主题。<br>当使用AppCompatDelegate.MODE_NIGHT_AUTO，它会时刻知道你最后的位置和时间（如果您的应用程序已开启位置权限）用于白天和黑夜之间自动切换的依据。MODE_NIGHT_NO 和 MODE_NIGHT_YES 则分别强制设定了从不或是一直使用夜晚主题。<br>这是您在使用白天主题的时候彻底测试你的应用程序的关键，因为白天主题的亮度很可能导致一些文字或者图标变得不可阅读。如果您使用的是标准TextAppearance.AppCompat 从你的主题样式android:textColorPrimary为你的文本或颜色，你会发现这些为你自动更新。</p><p><strong>3.Design Support Library: Bottom Sheets(材料设计，底部表)</strong></p><p><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f1c0cafmnrj30a00hswg9.jpg" alt=""></p><p>通过附加一个BottomSheetBehavior到子视图的<a href="http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/CoordinatorLayout.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">CoordinatorLayout</a>(添加app:layout_behavior =“android.support.design.widget.BottomSheetBehavior”)，通过对BottomSheet的操作我们可以得到它的五种状态。</p><ul><li>STATE_COLLAPSED：关闭Bottom Sheets，高度可控属性app:behavior_peekHeight（默认为0）</li><li>STATE_DRAGGING：在用户直接拖动Bottom Sheets向上或向下的中间状态</li><li>STATE_SETTLING：当Bottom Sheets被释放和沉降到其最终位置记录的状态</li><li>STATE_EXPANDED：Bottom Sheets展开时的状态</li><li>STATE_HIDDEN：默认情况下禁用(和启用应用程序：behavior_hideable属性),这使得用户可以向下滑动Bottom Sheets完全隐藏底部</li></ul><p>请记住，你的底部滚动容器必须支持嵌套滚动(例如，NestedScrollView, RecyclerView, or ListView/ScrollView on API 21+)。<br>如果需要监听Bottom Sheets回调时的状态，可以通过BottomSheetCallback来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// The View with the BottomSheetBehavior  </span><br><span class="line">View bottomSheet = coordinatorLayout.findViewById(R.id.bottom_sheet);  </span><br><span class="line">BottomSheetBehavior behavior = BottomSheetBehavior.from(bottomSheet);  </span><br><span class="line">behavior.setBottomSheetCallback(new BottomSheetCallback() &amp;#123;  </span><br><span class="line">   @Override  </span><br><span class="line">   public void onStateChanged(@NonNull View bottomSheet, int newState) &amp;#123;  </span><br><span class="line">     // 监听上述5种状态的变化 </span><br><span class="line">   &amp;#125;  </span><br><span class="line">     @Override  </span><br><span class="line">     public void onSlide(@NonNull View bottomSheet, float slideOffset) &amp;#123;  </span><br><span class="line">      // 拖拽中的回调</span><br><span class="line">  &amp;#125;  </span><br><span class="line">&amp;#125;);</span><br></pre></td></tr></table></figure><p>虽然BottomSheetBehavior能够捕获持续bottom sheet的情况，此版本还提供了一个BottomSheetDialog和BottomSheetDialogFragment填补了model bottom sheets使用情况。只需更换<a href="http://developer.android.com/intl/zh-cn/reference/android/support/v7/app/AppCompatDialog.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">AppCompatDialog</a>或<a href="http://developer.android.com/intl/zh-cn/reference/android/support/v7/app/AppCompatDialogFragment.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">AppCompatDialogFragment</a>作为底片。</p><p><strong>4.Support v4: MediaBrowserServiceCompat</strong></p><p>该<a href="http://developer.android.com/intl/zh-cn/tools/support-library/features.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog#v4" target="_blank" rel="noopener">Support v4</a>库用作许多支持库的基础，并且为一些新版本介绍的特征提供支持(backports)。<br>添加到以前发布的MediaSessionCompat类，为媒体播放了提供了坚实的基础，这个版本增加了MediaBrowserServiceCompat和MediaBrowserCompat提供，带来了最新的API兼容的解决方案（甚至没有在L设备上加）支持API4+。这使得我们更容易地在Android上支持媒体的播放和在Android Wear上浏览媒体，为我们提供了一个标准的接口，让你的媒体播放服务与界面连起来。</p><p><strong>5.RecyclerView</strong></p><p>最新的<a href="http://developer.android.com/intl/zh-cn/reference/android/support/v7/widget/RecyclerView.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">RecyclerView</a>目录结构如下</p><p><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f1bi7d1bexj30ge0uaq4o.jpg" alt=""></p><p>RecyclerView组件为我们提供了灵活的创建列表和网格以及动画的特性。这个版本带来一个激动人心的新特性LayoutManager API：自动测量！！！这允许RecyclerView尺寸大小根据其内容的大小尺寸定制。这意味着，先前不可用的情况，例如使用WRAP_CONTENT为尺寸的RecyclerView，现在都是可能的。你会发现所有内置的布局管理现在都支持自动测量。<br>由于这种变化，一定要确保你的item的布局属性：以前被忽视的布局参数（如MATCH_PARENT的滚动方向）现在将不一样。<br>如果你有一个自定义的LayoutManager并且不是基于之前的拓展，有一个选择就是你可以调用setAutoMeasureEnabled(true)，以及做一些小的变化（详情见Javadoc）来支持新特性<br>注意，虽然RecyclerView支持动画，但是他不支持自己动画边界变化，如果你想对RecyclerView边界进行动画处理，你可以使用 <a href="http://developer.android.com/intl/zh-cn/training/transitions/overview.html?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">Transition APIs</a>.</p><p><strong>6.Custom Tabs(自定义选项卡)。</strong></p><p><a href="http://developer.android.com/intl/zh-cn/reference/android/support/customtabs/package-summary.html" target="_blank" rel="noopener">Custom Tabs</a>能够同时保持你的应用程序的外观和感觉无缝地过渡到Web内容。在这个版本中，您现在就可以行动加入底栏显示旁边的网页内容。</p><p><img src="http://ww3.sinaimg.cn/mw690/005yqym4gw1f1c0cx6naqj30a00hs3z2.jpg" alt=""></p><p>有了新加的addToolbarItem(),你现在可以在底栏增加五种动作，并且一旦会话开始就可以使用 setToolBarItem()更新他们，你还会发现一个setSecondaryToolbarColor()自定义底栏的背景颜色。</p><p><strong>7.Leanback for Android TV</strong></p><p><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f1c0d8wl1pj30hs0a0t8v.jpg" alt=""></p><p>AndroidTV<br>请看原文，对这方面了解甚少，就不嚯嚯读者了。。</p><p>动手吧！！！<br>Android的支持库的版本23.2是通过您的SDK管理器和Android Studio中更新可用。充分利用所有的新特性以及其他bug修复从现在开始！与往常一样，在提交错误报告<a href="b.android.com">b.android.com</a>并与其他开发人员交流的<a href="https://plus.google.com/communities/105153134372062985968?utm_campaign=android_launch_supportlibrary23.2_022216&amp;utm_source=anddev&amp;utm_medium=blog" target="_blank" rel="noopener">Android开发Google+社群</a></p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      使用Hexo在GitHub上搭建个人博客
    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="最新" scheme="http://0x002.top/tags/%E6%9C%80%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio设置代理更新</title>
    <link href="http://0x002.top/2016/02/03/AndroidStudioProxy/"/>
    <id>http://0x002.top/2016/02/03/AndroidStudioProxy/</id>
    <published>2016-02-03T03:41:15.000Z</published>
    <updated>2018-05-30T12:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近AndroidStudio更新频繁，Preview几乎一天一个版本，但是我从3之后就升不上去了，期间更新几次一次Failure，就没管，因为我用的ShadowSocks，应该全局翻墙可以啊。不行就纳闷了，直到今天感谢群里一哥们，使用SS的哥们福音到了，请看这篇文章。</p><a id="more"></a><p>不好意思，把你骗进来了，嘿嘿，看下面的这个Blog应该能完美解决你的问题</p><p><a href="http://blog.csdn.net/lchad/article/details/43567675" target="_blank" rel="noopener">AndroidStudio设置代理</a></p><p>亲测成功Update到了Preview9</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近AndroidStudio更新频繁，Preview几乎一天一个版本，但是我从3之后就升不上去了，期间更新几次一次Failure，就没管，因为我用的ShadowSocks，应该全局翻墙可以啊。不行就纳闷了，直到今天感谢群里一哥们，使用SS的哥们福音到了，请看这篇文章。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;不好意思，把你骗进来了，嘿嘿，看下面的这个Blog应该能完美解决你的问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/lchad/article/details/43567675&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AndroidStudio设置代理&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;亲测成功Update到了Preview9&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="AndroidStudio小技巧" scheme="http://0x002.top/tags/AndroidStudio%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>自定义文本显示TextView</title>
    <link href="http://0x002.top/2016/01/31/CustomTextShow/"/>
    <id>http://0x002.top/2016/01/31/CustomTextShow/</id>
    <published>2016-01-31T09:06:48.000Z</published>
    <updated>2018-05-30T12:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在的app，数据我们从后台拿到，然后显示在指定的区域，但是后台可能会包含一些html的标签，像<code>&lt;a&gt;,&lt;b&gt;</code>等等，我们总不能让用户看到这些内容，我们客户端处理一下就好了，自定义TextView就OK。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public class MyCustomTextView extends TextView &amp;#123;</span><br><span class="line">public MyCustomTextView(Context context) &amp;#123;</span><br><span class="line">super(context);</span><br><span class="line">&amp;#125;</span><br><span class="line"></span><br><span class="line">public MyCustomTextView(Context context, AttributeSet attrs) &amp;#123;</span><br><span class="line">super(context, attrs);</span><br><span class="line">&amp;#125;</span><br><span class="line"></span><br><span class="line">public MyCustomTextView(Context context, AttributeSet attrs, int defStyle) &amp;#123;</span><br><span class="line">super(context, attrs, defStyle);</span><br><span class="line">&amp;#125;</span><br><span class="line"></span><br><span class="line">public void set(String comments) &amp;#123;</span><br><span class="line">if (comments.contains(&quot;&lt;&quot;)) &amp;#123;</span><br><span class="line">setText(Html.fromHtml(comments));</span><br><span class="line">setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class="line">CharSequence text = getText();</span><br><span class="line">if (text instanceof Spannable) &amp;#123;</span><br><span class="line">int end = text.length();</span><br><span class="line">Spannable sp = (Spannable) getText();</span><br><span class="line">URLSpan[] urls = sp.getSpans(0, end, URLSpan.class);</span><br><span class="line">SpannableStringBuilder style = new SpannableStringBuilder(</span><br><span class="line">text);</span><br><span class="line">style.clearSpans();// should clear old spans</span><br><span class="line"></span><br><span class="line">// 循环把链接发过去</span><br><span class="line">for (URLSpan url : urls) &amp;#123;</span><br><span class="line">MyURLSpan myURLSpan = new MyURLSpan(url.getURL());</span><br><span class="line">style.setSpan(myURLSpan, sp.getSpanStart(url),</span><br><span class="line">sp.getSpanEnd(url),</span><br><span class="line">Spannable.SPAN_EXCLUSIVE_INCLUSIVE);</span><br><span class="line">&amp;#125;</span><br><span class="line">setText(style);</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125; else &amp;#123;</span><br><span class="line">setText(comments);</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;</span><br><span class="line"></span><br><span class="line">class MyURLSpan extends ClickableSpan &amp;#123;</span><br><span class="line"></span><br><span class="line">private String mUrl;</span><br><span class="line"></span><br><span class="line">MyURLSpan(String url) &amp;#123;</span><br><span class="line">mUrl = url;</span><br><span class="line">&amp;#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void updateDrawState(TextPaint ds) &amp;#123;</span><br><span class="line">super.updateDrawState(ds);</span><br><span class="line">ds.setColor(Color.parseColor(&quot;#507daf&quot;));</span><br><span class="line">ds.setUnderlineText(false); // 去掉下划线</span><br><span class="line">&amp;#125;</span><br><span class="line">     //处理链接点击事件</span><br><span class="line">@Override</span><br><span class="line">public void onClick(View widget) &amp;#123;</span><br><span class="line"></span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>使用的时候直接在XML中引用就好了，然后java代码中显示我们要显示的内容。MyCustomTextView.set(content);就好了。</p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在的app，数据我们从后台拿到，然后显示在指定的区域，但是后台可能会包含一些html的标签，像&lt;code&gt;&amp;lt;a&amp;gt;,&amp;lt;b&amp;gt;&lt;/code&gt;等等，我们总不能让用户看到这些内容，我们客户端处理一下就好了，自定义TextView就OK。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class MyCustomTextView extends TextView &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public MyCustomTextView(Context context) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		super(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public MyCustomTextView(Context context, AttributeSet attrs) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		super(context, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public MyCustomTextView(Context context, AttributeSet attrs, int defStyle) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		super(context, attrs, defStyle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void set(String comments) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (comments.contains(&amp;quot;&amp;lt;&amp;quot;)) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			setText(Html.fromHtml(comments));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			setMovementMethod(LinkMovementMethod.getInstance());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			CharSequence text = getText();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if (text instanceof Spannable) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				int end = text.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Spannable sp = (Spannable) getText();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				URLSpan[] urls = sp.getSpans(0, end, URLSpan.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				SpannableStringBuilder style = new SpannableStringBuilder(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						text);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				style.clearSpans();// should clear old spans&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				// 循环把链接发过去&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				for (URLSpan url : urls) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					MyURLSpan myURLSpan = new MyURLSpan(url.getURL());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					style.setSpan(myURLSpan, sp.getSpanStart(url),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							sp.getSpanEnd(url),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							Spannable.SPAN_EXCLUSIVE_INCLUSIVE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				setText(style);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;#125; else &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			setText(comments);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	class MyURLSpan extends ClickableSpan &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		private String mUrl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		MyURLSpan(String url) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			mUrl = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void updateDrawState(TextPaint ds) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			super.updateDrawState(ds);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ds.setColor(Color.parseColor(&amp;quot;#507daf&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ds.setUnderlineText(false); // 去掉下划线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     //处理链接点击事件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		public void onClick(View widget) &amp;amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用的时候直接在XML中引用就好了，然后java代码中显示我们要显示的内容。MyCustomTextView.set(content);就好了。&lt;/p&gt;
&lt;p&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="自定义UI" scheme="http://0x002.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89UI/"/>
    
      <category term="实战小技巧" scheme="http://0x002.top/tags/%E5%AE%9E%E6%88%98%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>吐槽CollapsingToolbarLayout</title>
    <link href="http://0x002.top/2016/01/29/FuckAndroidSDK/"/>
    <id>http://0x002.top/2016/01/29/FuckAndroidSDK/</id>
    <published>2016-01-29T07:02:35.000Z</published>
    <updated>2018-05-30T12:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天真是日了狗了，之前在我们的项目中用到了CollapsingToolbarLayout，compileSdkVersion设置的22，因为有一些属性只有23才有，只好改成了23，不改不要紧，改完之后，CollapsingToolbarLayout的Title不显示了。。。。开始没想太多，以为自己写错了，或者改成23之后多了什么API，去了developer上面看了一下，没问题啊，Google了一番，说这是一个Google的bug，当时心中真是有一万只草泥马啊。。。<br>但是吐槽归吐槽，如果你用不到Title的话，也可以改成23，里面有一个属性app:layout_scrollFlags=”snap”，这里面多了一个snap属性，就是当你上滑的时候如果一半，他不会停留，他会自动滑上去，而在22却没有，还有一些属性，22也没有，就是setCollapsedTitleGravity设置标题显示位置，现在标题都不出来了，这个属性也就显得无足轻重了。<br>如果有好的解决方法，不妨告知。。。<br><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天真是日了狗了，之前在我们的项目中用到了CollapsingToolbarLayout，compileSdkVersion设置的22，因为有一些属性只有23才有，只好改成了23，不改不要紧，改完之后，CollapsingToolbarLayout的Title不显示了。。。。开始没想太多，以为自己写错了，或者改成23之后多了什么API，去了developer上面看了一下，没问题啊，Google了一番，说这是一个Google的bug，当时心中真是有一万只草泥马啊。。。&lt;br&gt;但是吐槽归吐槽，如果你用不到Title的话，也可以改成23，里面有一个属性app:layout_scrollFlags=”snap”，这里面多了一个snap属性，就是当你上滑的时候如果一半，他不会停留，他会自动滑上去，而在22却没有，还有一些属性，22也没有，就是setCollapsedTitleGravity设置标题显示位置，现在标题都不出来了，这个属性也就显得无足轻重了。&lt;br&gt;如果有好的解决方法，不妨告知。。。&lt;br&gt;&lt;b&gt;版权声明：&lt;/b&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="随记" scheme="http://0x002.top/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apk瘦身+Proguard混淆实战</title>
    <link href="http://0x002.top/2016/01/28/ApkProguardStudy/"/>
    <id>http://0x002.top/2016/01/28/ApkProguardStudy/</id>
    <published>2016-01-28T14:55:58.000Z</published>
    <updated>2018-05-30T12:37:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>很高兴，经过1天的时间，我们的apk从23M已经瘦到了17.9M，这里很感谢这篇博客给我带来的冲动，<a href="http://www.jayfeng.com/2015/12/29/APK%E7%98%A6%E8%BA%AB%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">APK瘦身实践</a>，这里面提到的如果都试过，肯定会有质的飞跃，我只试了几个，就带来了意想不到的收获，下面我们一起来见证这奇迹的时刻。</p><a id="more"></a><p>先上图<br><strong>当minifyEnabled＝false是这样的，也就是没代码混淆</strong></p><p><img src="http://ww3.sinaimg.cn/thumbnail/005yqym4gw1f0g4zlr0lbj30be0eugmd.jpg" alt=""></p><p><img src="http://ww3.sinaimg.cn/thumbnail/005yqym4gw1f0g4zwtvmfj30bq0ecjs2.jpg" alt=""></p><p>对比7zip18.9M，普通的18.6M</p><p><strong>当use7zip＝false是这样的，没开启7zip压缩</strong><br><img src="http://ww4.sinaimg.cn/thumbnail/005yqym4gw1f0g50865uyj30c20eo3z5.jpg" alt=""></p><p>18.6M<br><strong>当全为true是这样的</strong><br><img src="http://ww4.sinaimg.cn/thumbnail/005yqym4gw1f0g50iqzvej30ba0e4q3k.jpg" alt=""></p><p><img src="http://ww2.sinaimg.cn/thumbnail/005yqym4gw1f0g54dqjiqj30m00r4gne.jpg" alt=""></p><p>对比7zip17.9M,普通18.6M<br>用微信Android资源混淆工具打包完成后是这样的<br>app/build/outputs/apk下面会多一个这样的文件夹AndResProguard<br><img src="http://ww1.sinaimg.cn/thumbnail/005yqym4gw1f0g551muf0j30bi0d6wfo.jpg" alt=""></p><p>命令是╰─➤  <strong>./gradlew generate</strong>，而不是./gradlew assembleRelease，如果你没用微信的那一套方法，用第二种就可以，如果你用了微信的那一套，必须用第一种口令了。<br>微信的那一套在这里<br><a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="noopener">AndResGuard</a><br>有中文文档，遇到问题可以参考里面的issues，当然里面也有我提的，嘿嘿。<br>这里一些技巧，去除无用代码，无用图片啊，这里就不说了，上面推荐的文章里面说的很清楚。<br>这里既然说的是apk瘦身+代码混淆。apk瘦身我这里靠的就是去除无用资源，优化图片，混淆代码实现的。<br>最重要的还是代码混淆，我这里用了双重混淆，一种proguard-rules.pro文件进行混淆，一种微信混淆工具进行混淆，这两种上面的文章有提到。第一种主要就是把gradle中的开关打开，然后进行proguard-rules.pro的文件编写，因为这里是在As中进行的。<br>注意：<em>在使用Eclipse+ADT时需要加入-libraryjars libs/…，如果你是使用Android Studio开发的项目则不需要加入libs包中的jar包，这是因为，通过Android Studio进行混淆代码时，默认已经将 lib目录中的 jar 都已经添加到打包脚本中，所以不需要再次手动添加，否则会出现“ java.io.IOException: The same input jar is specified twice” 错误。</em><br>我这里贴出来我写的一部分，结合你们自己的项目进行混淆，哪些进行混淆，哪些不能进行混淆。<br><em>1.JavaBean类即实体类不被混淆。<br>2.自定义控件不参与混淆。<br>3.枚举不被混淆。<br>4.第三方库中的类不进行混淆</em><br>举一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#baidu</span><br><span class="line">-keep class com.baidu.**   &amp;#123;*;&amp;#125;</span><br><span class="line">-keep class vi.com.**   &amp;#123;*;&amp;#125;</span><br><span class="line">-dontwarn com.baidu.**</span><br><span class="line">-dontwarn vi.com.**</span><br></pre></td></tr></table></figure><p>百度第三方库，这样写的意思是，-keep class com.baidu.<strong> &#123; *; &#125;   让ProGuard不要警告找不到com.baidu.</strong>这个包里面的类的相关引用<br>-dontwarn com.baidu.<strong>  保持com.baidu.</strong>这个包里面的所有类和所有方法不被混淆。<br>几乎第三方类都这样写就可以了，怎么找到它对应的包那，<br><img src="http://ww1.sinaimg.cn/mw690/005yqym4gw1f0g55gg8d8j30gy05imxo.jpg" alt=""><br>展开lib下面引用的第三方就可以了，还有一些是在gradle中加的，那就到这里找就好了<br><img src="http://ww2.sinaimg.cn/mw690/005yqym4gw1f0g55qv3yhj30d8020mxa.jpg" alt=""></p><p>然后仿照上面的书写格式就好了。当你觉得写的差不多的时候打一个包出来，然后安装看看，我昨天就是一口气弄完，最后BUILD SUCCESSFUL了，但是安装到手机上面就是崩溃，还是有些不该混淆的类给混淆了，他找不到了。<br>微信那一个Github的文档，还有一个demo应该能玩转了，就是如果开启7zip压缩，首先你电脑要有7zip，Mac上面安装很简单，brew install p7zip，然后把Github上面的那一段gradle复制进去，要对应好哦，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &amp;#123;</span><br><span class="line">    dependencies &amp;#123;</span><br><span class="line">        classpath &apos;com.tencent.mm:AndResGuard-gradle-plugin:1.1.2&apos;</span><br><span class="line">    &amp;#125;</span><br><span class="line">&amp;#125;</span><br></pre></td></tr></table></figure><p>这一段是放在Project中的gradle的，剩下的都是放在Module中gradle的。</p><p>参考资料：</p><p><a href="http://my.oschina.net/aibenben/blog/371889" target="_blank" rel="noopener">代码混淆和破解apk</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0113/2304.html" target="_blank" rel="noopener">Android Proguard 详解</a><br><a href="http://blog.csdn.net/catoop/article/details/47208833" target="_blank" rel="noopener"> Android 项目的代码混淆，Android proguard 使用说明</a></p><p><b>版权声明：</b><br></p><p><hr><br><em>除非注明，本博文章均为原创，转载请以链接形式标明本文地址。</em><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很高兴，经过1天的时间，我们的apk从23M已经瘦到了17.9M，这里很感谢这篇博客给我带来的冲动，&lt;a href=&quot;http://www.jayfeng.com/2015/12/29/APK%E7%98%A6%E8%BA%AB%E5%AE%9E%E8%B7%B5/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;APK瘦身实践&lt;/a&gt;，这里面提到的如果都试过，肯定会有质的飞跃，我只试了几个，就带来了意想不到的收获，下面我们一起来见证这奇迹的时刻。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先上图&lt;br&gt;&lt;strong&gt;当minifyEnabled＝false是这样的，也就是没代码混淆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/thumbnail/005yqym4gw1f0g4zlr0lbj30be0eugmd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/thumbnail/005yqym4gw1f0g4zwtvmfj30bq0ecjs2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比7zip18.9M，普通的18.6M&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当use7zip＝false是这样的，没开启7zip压缩&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/thumbnail/005yqym4gw1f0g50865uyj30c20eo3z5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;18.6M&lt;br&gt;&lt;strong&gt;当全为true是这样的&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/thumbnail/005yqym4gw1f0g50iqzvej30ba0e4q3k.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/thumbnail/005yqym4gw1f0g54dqjiqj30m00r4gne.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对比7zip17.9M,普通18.6M&lt;br&gt;用微信Android资源混淆工具打包完成后是这样的&lt;br&gt;app/build/outputs/apk下面会多一个这样的文件夹AndResProguard&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/thumbnail/005yqym4gw1f0g551muf0j30bi0d6wfo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://0x002.top/categories/Android/"/>
    
    
      <category term="apk瘦身" scheme="http://0x002.top/tags/apk%E7%98%A6%E8%BA%AB/"/>
    
      <category term="代码混淆" scheme="http://0x002.top/tags/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
</feed>
